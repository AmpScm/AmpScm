#nullable enable
abstract AmpScm.Buckets.Client.BucketWebRequest.GetResponseAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Client.ResponseBucket!>
AmpScm.Buckets.BucketBytes.ToASCIIString() -> string!
AmpScm.Buckets.BucketBytes.ToASCIIString(AmpScm.Buckets.BucketEol eol) -> string!
AmpScm.Buckets.BucketBytes.ToASCIIString(int position, int length) -> string!
AmpScm.Buckets.BucketBytes.ToASCIIString(int position, int length, AmpScm.Buckets.BucketEol eol) -> string!
AmpScm.Buckets.BucketBytes.ToUTF8String() -> string!
AmpScm.Buckets.BucketBytes.ToUTF8String(AmpScm.Buckets.BucketEol eol) -> string!
AmpScm.Buckets.BucketBytes.ToUTF8String(int position, int length) -> string!
AmpScm.Buckets.BucketBytes.ToUTF8String(int position, int length, AmpScm.Buckets.BucketEol eol) -> string!
AmpScm.Buckets.BucketPollBytes.BucketPollBytes(AmpScm.Buckets.Bucket! bucket, AmpScm.Buckets.BucketBytes data, int alreadyRead) -> void
AmpScm.Buckets.Client.BasicBucketAuthenticationEventArgs
AmpScm.Buckets.Client.BasicBucketAuthenticationEventArgs.Password.get -> string?
AmpScm.Buckets.Client.BasicBucketAuthenticationEventArgs.Password.set -> void
AmpScm.Buckets.Client.BasicBucketAuthenticationEventArgs.Username.get -> string?
AmpScm.Buckets.Client.BasicBucketAuthenticationEventArgs.Username.set -> void
AmpScm.Buckets.Client.BucketAuthenticationEventArgs
AmpScm.Buckets.Client.BucketAuthenticationEventArgs.Continue.get -> bool
AmpScm.Buckets.Client.BucketAuthenticationEventArgs.Continue.set -> void
AmpScm.Buckets.Client.BucketAuthenticationEventArgs.Failed -> System.EventHandler<AmpScm.Buckets.Client.BucketAuthenticationEventArgs!>?
AmpScm.Buckets.Client.BucketAuthenticationEventArgs.Handled.get -> bool
AmpScm.Buckets.Client.BucketAuthenticationEventArgs.Handled.set -> void
AmpScm.Buckets.Client.BucketAuthenticationEventArgs.Realm.get -> string!
AmpScm.Buckets.Client.BucketAuthenticationEventArgs.Succeeded -> System.EventHandler<AmpScm.Buckets.Client.BucketAuthenticationEventArgs!>?
AmpScm.Buckets.Client.BucketAuthenticationEventArgs.Uri.get -> System.Uri!
AmpScm.Buckets.Client.BucketClientException
AmpScm.Buckets.Client.BucketClientException.BucketClientException() -> void
AmpScm.Buckets.Client.BucketClientException.BucketClientException(string! message) -> void
AmpScm.Buckets.Client.BucketClientException.BucketClientException(string! message, System.Exception! innerException) -> void
AmpScm.Buckets.Client.BucketClientException.BucketClientException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
AmpScm.Buckets.Client.BucketWebClient
AmpScm.Buckets.Client.BucketWebClient.BasicAuthentication -> System.EventHandler<AmpScm.Buckets.Client.BasicBucketAuthenticationEventArgs!>?
AmpScm.Buckets.Client.BucketWebClient.BucketWebClient() -> void
AmpScm.Buckets.Client.BucketWebClient.CreateRequest(string! url) -> AmpScm.Buckets.Client.BucketWebRequest!
AmpScm.Buckets.Client.BucketWebClient.CreateRequest(System.Uri! requestUri) -> AmpScm.Buckets.Client.BucketWebRequest!
AmpScm.Buckets.Client.BucketWebClient.Dispose() -> void
AmpScm.Buckets.Client.BucketWebRequest
AmpScm.Buckets.Client.BucketWebRequest.BucketWebRequest(AmpScm.Buckets.Client.BucketWebClient! client, System.Uri! requestUri) -> void
AmpScm.Buckets.Client.BucketWebRequest.Client.get -> AmpScm.Buckets.Client.BucketWebClient!
AmpScm.Buckets.Client.BucketWebRequest.ContentLength.get -> long?
AmpScm.Buckets.Client.BucketWebRequest.ContentLength.set -> void
AmpScm.Buckets.Client.BucketWebRequest.ContentType.get -> string?
AmpScm.Buckets.Client.BucketWebRequest.ContentType.set -> void
AmpScm.Buckets.Client.BucketWebRequest.Dispose() -> void
AmpScm.Buckets.Client.BucketWebRequest.DisposeAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.Client.BucketWebRequest.FollowRedirects.get -> bool
AmpScm.Buckets.Client.BucketWebRequest.FollowRedirects.set -> void
AmpScm.Buckets.Client.BucketWebRequest.Headers.get -> AmpScm.Buckets.Client.WebHeaderDictionary!
AmpScm.Buckets.Client.BucketWebRequest.PreAuthenticate.get -> bool
AmpScm.Buckets.Client.BucketWebRequest.PreAuthenticate.set -> void
AmpScm.Buckets.Client.BucketWebRequest.RequestUri.get -> System.Uri!
AmpScm.Buckets.Client.Http.HttpResponseBucket
AmpScm.Buckets.Client.Http.HttpResponseBucket.HttpMessage.get -> string?
AmpScm.Buckets.Client.Http.HttpResponseBucket.HttpStatus.get -> int?
AmpScm.Buckets.Client.Http.HttpResponseBucket.HttpVersion.get -> string?
AmpScm.Buckets.Client.Http.HttpResponseBucket.ReadStatusAsync() -> System.Threading.Tasks.ValueTask<int>
AmpScm.Buckets.Client.Http.HttpResponseBucket.Request.get -> AmpScm.Buckets.Client.Protocols.HttpBucketRequest!
AmpScm.Buckets.Client.Protocols.HttpBucketRequest
AmpScm.Buckets.Client.ResponseBucket
AmpScm.Buckets.Client.ResponseBucket.Request.get -> AmpScm.Buckets.Client.BucketWebRequest!
AmpScm.Buckets.Client.ResponseBucket.ResponseBucket(AmpScm.Buckets.Bucket! inner, AmpScm.Buckets.Client.BucketWebRequest! request) -> void
AmpScm.Buckets.Client.WebHeaderDictionary
AmpScm.Buckets.Client.WebHeaderDictionary.Contains(string! header) -> bool
AmpScm.Buckets.Client.WebHeaderDictionary.Contains(System.Net.HttpRequestHeader requestHeader) -> bool
AmpScm.Buckets.Client.WebHeaderDictionary.Contains(System.Net.HttpResponseHeader responseHeader) -> bool
AmpScm.Buckets.Client.WebHeaderDictionary.GetEnumerator() -> System.Collections.Generic.IEnumerator<string!>!
AmpScm.Buckets.Client.WebHeaderDictionary.Keys.get -> AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection!
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection.Add(string! item) -> void
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection.Clear() -> void
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection.Contains(string! item) -> bool
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection.CopyTo(string![]! array, int arrayIndex) -> void
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection.Count.get -> int
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<string!>!
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection.IsReadOnly.get -> bool
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection.Remove(string! item) -> bool
AmpScm.Buckets.Client.WebHeaderDictionary.KeysCollection.this[int index].get -> string!
AmpScm.Buckets.Client.WebHeaderDictionary.WebHeaderDictionary() -> void
AmpScm.Buckets.FileBucket
AmpScm.Buckets.HttpBucketException
AmpScm.Buckets.HttpBucketException.HttpBucketException() -> void
AmpScm.Buckets.HttpBucketException.HttpBucketException(string! message) -> void
AmpScm.Buckets.HttpBucketException.HttpBucketException(string? message, System.Exception? innerException) -> void
AmpScm.Buckets.HttpBucketException.HttpBucketException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
AmpScm.Buckets.Interfaces.IBucketNoClose
AmpScm.Buckets.Interfaces.IBucketNoClose.NoClose() -> AmpScm.Buckets.Bucket!
AmpScm.Buckets.Interfaces.IBucketPoll
AmpScm.Buckets.Interfaces.IBucketPoll.PollAsync(int minRequested = 1) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
AmpScm.Buckets.Interfaces.IBucketWriter
AmpScm.Buckets.Interfaces.IBucketWriter.ShutdownAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.Interfaces.IBucketWriter.Write(AmpScm.Buckets.Bucket! bucket) -> void
AmpScm.Buckets.Interfaces.IBucketWriterStats
AmpScm.Buckets.Interfaces.IBucketWriterStats.BytesWritten.get -> long
AmpScm.Buckets.MemoryBucket
AmpScm.Buckets.MemoryBucket.MemoryBucket(byte[]! data) -> void
AmpScm.Buckets.MemoryBucket.MemoryBucket(byte[]! data, int start, int length) -> void
AmpScm.Buckets.MemoryBucket.MemoryBucket(System.ReadOnlyMemory<byte> data) -> void
AmpScm.Buckets.SocketBucket
AmpScm.Buckets.SocketBucket.ConnectAsync(string! host, int port, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.SocketBucket.ShutdownAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.SocketBucket.SocketBucket(System.Net.Sockets.Socket! socket, int bufferSize = 16384) -> void
AmpScm.Buckets.SocketBucket.Write(AmpScm.Buckets.Bucket! bucket) -> void
AmpScm.Buckets.Specialized.BucketCompressionAlgorithm
AmpScm.Buckets.Specialized.BucketCompressionAlgorithm.Brotli = 3 -> AmpScm.Buckets.Specialized.BucketCompressionAlgorithm
AmpScm.Buckets.Specialized.BucketCompressionAlgorithm.Deflate = 0 -> AmpScm.Buckets.Specialized.BucketCompressionAlgorithm
AmpScm.Buckets.Specialized.BucketCompressionAlgorithm.GZip = 2 -> AmpScm.Buckets.Specialized.BucketCompressionAlgorithm
AmpScm.Buckets.Specialized.BucketCompressionAlgorithm.ZLib = 1 -> AmpScm.Buckets.Specialized.BucketCompressionAlgorithm
AmpScm.Buckets.Specialized.CreateHashBucket
AmpScm.Buckets.Specialized.CreateHashBucket.CreateHashBucket(AmpScm.Buckets.Bucket! inner, System.Security.Cryptography.HashAlgorithm! hasher) -> void
AmpScm.Buckets.Specialized.CreateHashBucket.CreateHashBucket(AmpScm.Buckets.Bucket! inner, System.Security.Cryptography.HashAlgorithm! hasher, System.Action<byte[]!>? hashCreated) -> void
AmpScm.Buckets.Specialized.CreateHashBucket.HashResult.get -> byte[]?
AmpScm.Buckets.BucketPollBytes
AmpScm.Buckets.BucketPollBytes.AlreadyRead.get -> int
AmpScm.Buckets.BucketPollBytes.Consume(int readBytes) -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.BucketPollBytes.Data.get -> AmpScm.Buckets.BucketBytes
AmpScm.Buckets.BucketPollBytes.Dispose() -> void
AmpScm.Buckets.BucketPollBytes.IsEmpty.get -> bool
AmpScm.Buckets.BucketPollBytes.IsEof.get -> bool
AmpScm.Buckets.BucketPollBytes.Length.get -> int
AmpScm.Buckets.BucketPollBytes.Position.get -> long?
AmpScm.Buckets.BucketPollBytes.ReadAsync(int readBytes) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
AmpScm.Buckets.BucketPollBytes.this[int index].get -> byte
AmpScm.Buckets.Specialized.CreateHashBucket.PollAsync(int minRequested = 1) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
AmpScm.Buckets.Specialized.NetBitConverter
AmpScm.Buckets.Specialized.ProxyBucket
AmpScm.Buckets.Specialized.ProxyBucket.ProxyBucket(AmpScm.Buckets.Bucket! inner) -> void
AmpScm.Buckets.Specialized.ProxyBucket<TBucket>
AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.ProxyBucket(AmpScm.Buckets.Bucket! inner) -> void
AmpScm.Buckets.Specialized.SpecializedBucketExtensions
AmpScm.Buckets.Specialized.TlsBucket
AmpScm.Buckets.Specialized.TlsBucket.BytesWritten.get -> long
AmpScm.Buckets.Specialized.TlsBucket.ShutdownAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.Specialized.TlsBucket.TlsBucket(AmpScm.Buckets.Bucket! reader, AmpScm.Buckets.Interfaces.IBucketWriter! writer, string! targetHost, int bufferSize = 16384) -> void
AmpScm.Buckets.Specialized.TlsBucket.Write(AmpScm.Buckets.Bucket! bucket) -> void
AmpScm.Buckets.Specialized.WrappingBucket
AmpScm.Buckets.Specialized.WrappingBucket.DontDisposeInner.get -> bool
AmpScm.Buckets.Specialized.WrappingBucket.Inner.get -> AmpScm.Buckets.Bucket!
AmpScm.Buckets.Specialized.WrappingBucket.NoClose() -> void
AmpScm.Buckets.Specialized.WrappingBucket.WrappingBucket(AmpScm.Buckets.Bucket! inner) -> void
AmpScm.Buckets.Specialized.WrappingBucket.WrappingBucket(AmpScm.Buckets.Bucket! inner, bool noDispose) -> void
AmpScm.Buckets.Specialized.ZLibBucket
AmpScm.Buckets.Specialized.ZLibBucket.ZLibBucket(AmpScm.Buckets.Bucket! inner) -> void
AmpScm.Buckets.Specialized.ZLibBucket.ZLibBucket(AmpScm.Buckets.Bucket! inner, AmpScm.Buckets.Specialized.ZLibLevel level) -> void
AmpScm.Buckets.Specialized.ZLibLevel
AmpScm.Buckets.Specialized.ZLibLevel.BestSpeed = 1 -> AmpScm.Buckets.Specialized.ZLibLevel
AmpScm.Buckets.Specialized.ZLibLevel.Maximum = 9 -> AmpScm.Buckets.Specialized.ZLibLevel
AmpScm.Buckets.Specialized.ZLibLevel.Store = 0 -> AmpScm.Buckets.Specialized.ZLibLevel
AmpScm.Buckets.ValueOrEof<T>
AmpScm.Buckets.ValueOrEof<T>.Equals(AmpScm.Buckets.ValueOrEof<T> other) -> bool
AmpScm.Buckets.ValueOrEof<T>.IsEof.get -> bool
AmpScm.Buckets.ValueOrEof<T>.Value.get -> T
AmpScm.Buckets.ValueOrEof<T>.ValueOrEof() -> void
AmpScm.Buckets.ValueOrEof<T>.ValueOrEof(bool eof) -> void
AmpScm.Buckets.ValueOrEof<T>.ValueOrEof(T value) -> void
override AmpScm.Buckets.AggregateBucket.CanReset.get -> bool
override AmpScm.Buckets.AggregateBucket.Dispose(bool disposing) -> void
override AmpScm.Buckets.AggregateBucket.DisposeAsyncCore() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.AggregateBucket.DuplicateAsync(bool reset) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Bucket!>
override AmpScm.Buckets.AggregateBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.AggregateBucket.Position.get -> long?
override AmpScm.Buckets.AggregateBucket.ReadAsync(int requested = 2147483647) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.AggregateBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.AggregateBucket.ReadSkipAsync(int requested) -> System.Threading.Tasks.ValueTask<int>
override AmpScm.Buckets.AggregateBucket.ResetAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.BucketBytes.Equals(object? obj) -> bool
override AmpScm.Buckets.BucketBytes.GetHashCode() -> int
override AmpScm.Buckets.Client.Http.HttpResponseBucket.ContentLength.get -> long
override AmpScm.Buckets.Client.Http.HttpResponseBucket.Headers.get -> AmpScm.Buckets.Client.WebHeaderDictionary!
override AmpScm.Buckets.Client.Http.HttpResponseBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Client.Http.HttpResponseBucket.Position.get -> long?
override AmpScm.Buckets.Client.Http.HttpResponseBucket.ReadAsync(int requested = 2147483647) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Client.Http.HttpResponseBucket.ReadHeaders() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.Client.Http.HttpResponseBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.Client.Http.HttpResponseBucket.SupportsHeaders.get -> bool
override AmpScm.Buckets.Client.Protocols.HttpBucketRequest.GetResponseAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Client.ResponseBucket!>
override AmpScm.Buckets.FileBucket.CanReset.get -> bool
override AmpScm.Buckets.FileBucket.DuplicateAsync(bool reset) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Bucket!>
override AmpScm.Buckets.FileBucket.Name.get -> string!
override AmpScm.Buckets.FileBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.FileBucket.Position.get -> long?
override AmpScm.Buckets.FileBucket.ReadAsync(int requested = 2147483647) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.FileBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.FileBucket.ReadSkipAsync(int requested) -> System.Threading.Tasks.ValueTask<int>
override AmpScm.Buckets.FileBucket.ResetAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.MemoryBucket.CanReset.get -> bool
override AmpScm.Buckets.MemoryBucket.DuplicateAsync(bool reset) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Bucket!>
override AmpScm.Buckets.MemoryBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.MemoryBucket.Position.get -> long?
override AmpScm.Buckets.MemoryBucket.ReadAsync(int requested = 2147483647) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.MemoryBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.MemoryBucket.ResetAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.SocketBucket.Dispose(bool disposing) -> void
override AmpScm.Buckets.SocketBucket.DisposeAsyncCore() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.SocketBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.SocketBucket.Position.get -> long?
override AmpScm.Buckets.SocketBucket.ReadAsync(int requested = 2147483647) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Specialized.CreateHashBucket.CanReset.get -> bool
override AmpScm.Buckets.Specialized.CreateHashBucket.DuplicateAsync(bool reset) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Bucket!>
override AmpScm.Buckets.Specialized.CreateHashBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Specialized.CreateHashBucket.Position.get -> long?
override AmpScm.Buckets.Specialized.CreateHashBucket.ReadAsync(int requested = 2147483647) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Specialized.CreateHashBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.Specialized.CreateHashBucket.ReadSkipAsync(int requested) -> System.Threading.Tasks.ValueTask<int>
override AmpScm.Buckets.Specialized.CreateHashBucket.ResetAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.Specialized.ProxyBucket.Name.get -> string!
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.CanReset.get -> bool
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.DuplicateAsync(bool reset) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Bucket!>
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.Position.get -> long?
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.ReadAsync(int requested = 2147483647) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.ReadBucket<TReadBucket>() -> System.Threading.Tasks.ValueTask<TReadBucket?>
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.ReadSkipAsync(int requested) -> System.Threading.Tasks.ValueTask<int>
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.ReadUntilEolAsync(AmpScm.Buckets.BucketEol acceptableEols, int requested = 2147483647) -> System.Threading.Tasks.ValueTask<(AmpScm.Buckets.BucketBytes, AmpScm.Buckets.BucketEol)>
override AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.ResetAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.Specialized.TlsBucket.CanReset.get -> bool
override AmpScm.Buckets.Specialized.TlsBucket.Dispose(bool disposing) -> void
override AmpScm.Buckets.Specialized.TlsBucket.DisposeAsyncCore() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.Specialized.TlsBucket.Name.get -> string!
override AmpScm.Buckets.Specialized.TlsBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Specialized.TlsBucket.Position.get -> long?
override AmpScm.Buckets.Specialized.TlsBucket.ReadAsync(int requested = 2147483647) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Specialized.WrappingBucket.Dispose(bool disposing) -> void
override AmpScm.Buckets.Specialized.WrappingBucket.DisposeAsyncCore() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.Specialized.WrappingBucket.Name.get -> string!
override AmpScm.Buckets.Specialized.ZLibBucket.CanReset.get -> bool
override AmpScm.Buckets.Specialized.ZLibBucket.DuplicateAsync(bool reset) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Bucket!>
override AmpScm.Buckets.Specialized.ZLibBucket.Name.get -> string!
override AmpScm.Buckets.Specialized.ZLibBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Specialized.ZLibBucket.Position.get -> long?
override AmpScm.Buckets.Specialized.ZLibBucket.ReadAsync(int requested = 2147483647) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Specialized.ZLibBucket.ResetAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.ValueOrEof<T>.Equals(object? obj) -> bool
override AmpScm.Buckets.ValueOrEof<T>.GetHashCode() -> int
static AmpScm.Buckets.BucketBytes.implicit operator AmpScm.Buckets.BucketBytes(byte[]! array) -> AmpScm.Buckets.BucketBytes
static AmpScm.Buckets.BucketBytes.implicit operator AmpScm.Buckets.BucketBytes(System.ArraySegment<byte> segment) -> AmpScm.Buckets.BucketBytes
static AmpScm.Buckets.BucketBytes.implicit operator AmpScm.Buckets.BucketBytes(System.ReadOnlyMemory<byte> segment) -> AmpScm.Buckets.BucketBytes
static AmpScm.Buckets.BucketBytes.implicit operator System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>(AmpScm.Buckets.BucketBytes v) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
static AmpScm.Buckets.BucketBytes.operator !=(AmpScm.Buckets.BucketBytes left, AmpScm.Buckets.BucketBytes right) -> bool
static AmpScm.Buckets.BucketBytes.operator ==(AmpScm.Buckets.BucketBytes left, AmpScm.Buckets.BucketBytes right) -> bool
static AmpScm.Buckets.BucketExtensions.Append(this AmpScm.Buckets.Bucket! self, AmpScm.Buckets.Bucket! newLast) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.AsBucket(System.ReadOnlySpan<byte> bytes) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.AsBucket(this byte[]! bytes) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.AsBucket(this byte[]! bytes, bool copy) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.AsBucket(this byte[]![]! bytes) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.AsBucket(this byte[]![]! bytes, bool keepOpen) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.AsBucket(this System.Collections.Generic.IEnumerable<AmpScm.Buckets.Bucket!>! buckets) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.AsBucket(this System.Collections.Generic.IEnumerable<AmpScm.Buckets.Bucket!>! buckets, bool keepOpen) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.AsBucket(this System.ReadOnlyMemory<byte> memory) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.AsReader(this AmpScm.Buckets.Bucket! self) -> System.IO.TextReader!
static AmpScm.Buckets.BucketExtensions.AsStream(this AmpScm.Buckets.Bucket! self) -> System.IO.Stream!
static AmpScm.Buckets.BucketExtensions.AsStream(this AmpScm.Buckets.Bucket! self, AmpScm.Buckets.Interfaces.IBucketWriter! writer) -> System.IO.Stream!
static AmpScm.Buckets.BucketExtensions.Compress(this AmpScm.Buckets.Bucket! self, AmpScm.Buckets.Specialized.BucketCompressionAlgorithm algorithm) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.Decompress(this AmpScm.Buckets.Bucket! self, AmpScm.Buckets.Specialized.BucketCompressionAlgorithm algorithm) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.NoClose(this AmpScm.Buckets.Bucket! bucket, bool alwaysWrap = false) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.PollAsync(this AmpScm.Buckets.Bucket! self, int minRequested = 1) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
static AmpScm.Buckets.BucketExtensions.PollReadAsync(this AmpScm.Buckets.Bucket! self, int minRequested = 1) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketPollBytes!>
static AmpScm.Buckets.BucketExtensions.Prepend(this AmpScm.Buckets.Bucket! self, AmpScm.Buckets.Bucket! newFirst) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.SeekOnReset(this AmpScm.Buckets.Bucket! bucket) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.Skip(this AmpScm.Buckets.Bucket! self, long firstPosition, bool alwaysWrap = false) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.Take(this AmpScm.Buckets.Bucket! self, long limit, bool alwaysWrap = false) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.ToArray(this AmpScm.Buckets.Bucket! self) -> byte[]!
static AmpScm.Buckets.BucketExtensions.ToArrayAsync(this AmpScm.Buckets.Bucket! self) -> System.Threading.Tasks.ValueTask<byte[]!>
static AmpScm.Buckets.BucketExtensions.VerifyBehavior<TBucket>(this TBucket! toVerify) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.WithPosition(this AmpScm.Buckets.Bucket! self, bool alwaysWrap = false) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.BucketExtensions.WithTlsClientFor<TBucket>(this TBucket! bucket, string! targetHost) -> AmpScm.Buckets.Specialized.TlsBucket!
static AmpScm.Buckets.BucketExtensions.Wrap(this AmpScm.Buckets.Bucket! self) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.FileBucket.OpenRead(string! path) -> AmpScm.Buckets.FileBucket!
static AmpScm.Buckets.FileBucket.OpenRead(string! path, bool forAsync) -> AmpScm.Buckets.FileBucket!
static AmpScm.Buckets.Specialized.NetBitConverter.FromNetwork(int value) -> int
static AmpScm.Buckets.Specialized.NetBitConverter.FromNetwork(long value) -> long
static AmpScm.Buckets.Specialized.NetBitConverter.FromNetwork(short value) -> short
static AmpScm.Buckets.Specialized.NetBitConverter.FromNetwork(uint value) -> uint
static AmpScm.Buckets.Specialized.NetBitConverter.FromNetwork(ulong value) -> ulong
static AmpScm.Buckets.Specialized.NetBitConverter.FromNetwork(ushort value) -> ushort
static AmpScm.Buckets.Specialized.NetBitConverter.GetBytes(int value) -> byte[]!
static AmpScm.Buckets.Specialized.NetBitConverter.GetBytes(long value) -> byte[]!
static AmpScm.Buckets.Specialized.NetBitConverter.GetBytes(short value) -> byte[]!
static AmpScm.Buckets.Specialized.NetBitConverter.GetBytes(uint value) -> byte[]!
static AmpScm.Buckets.Specialized.NetBitConverter.GetBytes(ulong value) -> byte[]!
static AmpScm.Buckets.Specialized.NetBitConverter.GetBytes(ushort value) -> byte[]!
static AmpScm.Buckets.Specialized.NetBitConverter.ToInt16(byte[]! value, int startOffset) -> short
static AmpScm.Buckets.Specialized.NetBitConverter.ToInt32(byte[]! value, int startOffset) -> int
static AmpScm.Buckets.Specialized.NetBitConverter.ToInt64(byte[]! value, int startOffset) -> long
static AmpScm.Buckets.Specialized.NetBitConverter.ToNetwork(int value) -> int
static AmpScm.Buckets.Specialized.NetBitConverter.ToNetwork(long value) -> long
static AmpScm.Buckets.Specialized.NetBitConverter.ToNetwork(short value) -> short
static AmpScm.Buckets.Specialized.NetBitConverter.ToNetwork(uint value) -> uint
static AmpScm.Buckets.Specialized.NetBitConverter.ToNetwork(ulong value) -> ulong
static AmpScm.Buckets.Specialized.NetBitConverter.ToNetwork(ushort value) -> ushort
static AmpScm.Buckets.Specialized.NetBitConverter.ToUInt16(byte[]! value, int startOffset) -> ushort
static AmpScm.Buckets.Specialized.NetBitConverter.ToUInt32(byte[]! value, int startOffset) -> uint
static AmpScm.Buckets.Specialized.NetBitConverter.ToUInt64(byte[]! value, int startOffset) -> ulong
static AmpScm.Buckets.Specialized.SpecializedBucketExtensions.CharCount(this AmpScm.Buckets.BucketEol eol) -> int
static AmpScm.Buckets.Specialized.SpecializedBucketExtensions.Crc32(this AmpScm.Buckets.Bucket! self, System.Action<int>! created) -> AmpScm.Buckets.Specialized.CreateHashBucket!
static AmpScm.Buckets.Specialized.SpecializedBucketExtensions.MD5(this AmpScm.Buckets.Bucket! self, System.Action<byte[]!>! created) -> AmpScm.Buckets.Specialized.CreateHashBucket!
static AmpScm.Buckets.Specialized.SpecializedBucketExtensions.ReadFullAsync(this AmpScm.Buckets.Bucket! self, int requested) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
static AmpScm.Buckets.Specialized.SpecializedBucketExtensions.ReadSkipUntilEofAsync(this AmpScm.Buckets.Bucket! self) -> System.Threading.Tasks.ValueTask
static AmpScm.Buckets.Specialized.SpecializedBucketExtensions.ReadUntilAsync(this AmpScm.Buckets.Bucket! self, byte b) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
static AmpScm.Buckets.Specialized.SpecializedBucketExtensions.ReadUntilEolFullAsync(this AmpScm.Buckets.Bucket! self, AmpScm.Buckets.BucketEol acceptableEols, AmpScm.Buckets.BucketEolState? eolState, int requested = 2147483647) -> System.Threading.Tasks.ValueTask<(AmpScm.Buckets.BucketBytes, AmpScm.Buckets.BucketEol)>
static AmpScm.Buckets.Specialized.SpecializedBucketExtensions.SHA1(this AmpScm.Buckets.Bucket! self, System.Action<byte[]!>! created) -> AmpScm.Buckets.Specialized.CreateHashBucket!
static AmpScm.Buckets.Specialized.SpecializedBucketExtensions.SHA256(this AmpScm.Buckets.Bucket! self, System.Action<byte[]!>! created) -> AmpScm.Buckets.Specialized.CreateHashBucket!
static AmpScm.Buckets.ValueOrEof<T>.implicit operator AmpScm.Buckets.ValueOrEof<T>(T value) -> AmpScm.Buckets.ValueOrEof<T>
static AmpScm.Buckets.ValueOrEof<T>.operator !=(AmpScm.Buckets.ValueOrEof<T> left, AmpScm.Buckets.ValueOrEof<T> right) -> bool
static AmpScm.Buckets.ValueOrEof<T>.operator ==(AmpScm.Buckets.ValueOrEof<T> left, AmpScm.Buckets.ValueOrEof<T> right) -> bool
static readonly AmpScm.Buckets.Bucket.EmptyTask -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
static readonly AmpScm.Buckets.Bucket.EofTask -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
virtual AmpScm.Buckets.Client.BucketWebClient.Dispose(bool disposing) -> void
virtual AmpScm.Buckets.Client.BucketWebRequest.Dispose(bool disposing) -> void
virtual AmpScm.Buckets.Client.BucketWebRequest.DisposeAsyncCore() -> System.Threading.Tasks.ValueTask
virtual AmpScm.Buckets.Client.BucketWebRequest.Method.get -> string?
virtual AmpScm.Buckets.Client.BucketWebRequest.Method.set -> void
virtual AmpScm.Buckets.Client.ResponseBucket.ContentLength.get -> long
virtual AmpScm.Buckets.Client.ResponseBucket.ContentType.get -> string?
virtual AmpScm.Buckets.Client.ResponseBucket.Headers.get -> AmpScm.Buckets.Client.WebHeaderDictionary!
virtual AmpScm.Buckets.Client.ResponseBucket.ReadHeaders() -> System.Threading.Tasks.ValueTask
virtual AmpScm.Buckets.Client.ResponseBucket.SupportsHeaders.get -> bool
virtual AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.NoClose() -> AmpScm.Buckets.Bucket!
virtual AmpScm.Buckets.Specialized.ProxyBucket<TBucket>.WrapDuplicate(AmpScm.Buckets.Bucket! duplicatedInner, bool reset) -> TBucket?
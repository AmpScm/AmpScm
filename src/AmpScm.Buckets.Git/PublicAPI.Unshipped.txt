#nullable enable
abstract AmpScm.Buckets.Git.GitObjectBucket.SeekAsync(long newPosition) -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.Git.GitBucket.GitBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitBundleBucket
AmpScm.Buckets.Git.GitBundleBucket.GitBundleBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitBundleBucket.ReadCapabilityAsync() -> System.Threading.Tasks.ValueTask<(string? Key, string? Value)>
AmpScm.Buckets.Git.GitBundleBucket.ReadPackBucketAsync() -> System.Threading.Tasks.ValueTask<(AmpScm.Buckets.Bucket! Bucket, AmpScm.Git.GitIdType IdType)>
AmpScm.Buckets.Git.GitBundleBucket.ReadPrerequisiteAsync() -> System.Threading.Tasks.ValueTask<(AmpScm.Git.GitId? Id, string? Comment)>
AmpScm.Buckets.Git.GitBundleBucket.ReadReferenceAsync() -> System.Threading.Tasks.ValueTask<(AmpScm.Git.GitId? Id, string? Name)>
AmpScm.Buckets.Git.GitBundleBucket.ReadVersionAsync() -> System.Threading.Tasks.ValueTask<int>
AmpScm.Buckets.Git.GitConfigurationBucket.GitConfigurationBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitDirectoryBucket
AmpScm.Buckets.Git.GitDirectoryBucket.GitDirectoryBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitDirectoryBucket.GitDirectoryBucket(AmpScm.Buckets.Bucket! source, AmpScm.Buckets.Git.GitDirectoryOptions? options) -> void
AmpScm.Buckets.Git.GitDirectoryBucket.GitDirectoryBucket(string! gitDirectory) -> void
AmpScm.Buckets.Git.GitDirectoryBucket.GitDirectoryBucket(string! gitDirectory, AmpScm.Buckets.Git.GitDirectoryOptions? options) -> void
AmpScm.Buckets.Git.GitDirectoryBucket.IndexVersion.get -> int?
AmpScm.Buckets.Git.GitDirectoryBucket.ProcessExtensionsAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.Git.GitDirectoryBucket.ReadEntryAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitDirectoryEntry?>
AmpScm.Buckets.Git.GitDirectoryBucket.ReadHeaderAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.Git.GitDirectoryEntry
AmpScm.Buckets.Git.GitDirectoryEntry.CompareTo(AmpScm.Buckets.Git.GitDirectoryEntry? other) -> int
AmpScm.Buckets.Git.GitDirectoryEntry.CreationTime.get -> System.DateTime
AmpScm.Buckets.Git.GitDirectoryEntry.DeviceId.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.DeviceId.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.Flags.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.Flags.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.GroupId.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.GroupId.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.Id.get -> AmpScm.Git.GitId!
AmpScm.Buckets.Git.GitDirectoryEntry.Id.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.INodeId.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.INodeId.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.ModificationTime.get -> System.DateTime
AmpScm.Buckets.Git.GitDirectoryEntry.Name.get -> string!
AmpScm.Buckets.Git.GitDirectoryEntry.Name.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.Stage.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.TruncatedFileSize.get -> uint
AmpScm.Buckets.Git.GitDirectoryEntry.TruncatedFileSize.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.Type.get -> AmpScm.Git.GitTreeElementType
AmpScm.Buckets.Git.GitDirectoryEntry.Type.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UnixCreationTime.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UnixCreationTime.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UnixCreationTimeNano.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UnixCreationTimeNano.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UnixModificationTime.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UnixModificationTime.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UnixModificationTimeNano.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UnixModificationTimeNano.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UserId.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UserId.init -> void
AmpScm.Buckets.Git.GitDirectoryOptions
AmpScm.Buckets.Git.GitDirectoryOptions.GitDirectoryOptions() -> void
AmpScm.Buckets.Git.GitDirectoryOptions.IdType.get -> AmpScm.Git.GitIdType
AmpScm.Buckets.Git.GitDirectoryOptions.IdType.set -> void
AmpScm.Buckets.Git.GitDirectoryOptions.LookForEndOfIndex.get -> bool
AmpScm.Buckets.Git.GitDirectoryOptions.LookForEndOfIndex.set -> void
AmpScm.Buckets.Git.GitDirectoryOptions.PreLoadExtensions.get -> bool
AmpScm.Buckets.Git.GitDirectoryOptions.PreLoadExtensions.set -> void
AmpScm.Buckets.Git.GitEwahBitmapBucket.AllBits.get -> System.Collections.Generic.IAsyncEnumerable<bool>!
AmpScm.Buckets.Git.GitEwahBitmapBucket.GitEwahBitmapBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitEwahBitmapBucket.ReadLengthAsync() -> System.Threading.Tasks.ValueTask<int>
AmpScm.Buckets.Git.GitEwahBitmapBucket.SetIndexes.get -> System.Collections.Generic.IAsyncEnumerable<int>!
AmpScm.Buckets.Git.GitFileObjectBucket.GitFileObjectBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitLineIndentBucket
AmpScm.Buckets.Git.GitLineIndentBucket.GitLineIndentBucket(AmpScm.Buckets.Bucket! source, AmpScm.Buckets.BucketEol acceptableEols = AmpScm.Buckets.BucketEol.LF) -> void
AmpScm.Buckets.Git.GitLineUnindentBucket
AmpScm.Buckets.Git.GitLineUnindentBucket.GitLineUnindentBucket(AmpScm.Buckets.Bucket! source, AmpScm.Buckets.BucketEol acceptableEols = AmpScm.Buckets.BucketEol.LF) -> void
AmpScm.Buckets.Git.GitObjectBucket.GitObjectBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitPacketBucket.GitPacketBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitPackHeaderBucket.GitPackHeaderBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitPackObjectBucket.GitPackObjectBucket(AmpScm.Buckets.Bucket! source, AmpScm.Git.GitIdType idType, System.Func<AmpScm.Git.GitId!, System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitObjectBucket?>>? fetchBucketById = null, System.Func<long, System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitObjectBucket!>>? fetchBucketByOffset = null) -> void
AmpScm.Buckets.Git.GitReferenceLogBucket.GitReferenceLogBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.GitCommitObjectBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.GitCommitObjectBucket(AmpScm.Buckets.Bucket! source, System.Func<AmpScm.Buckets.Git.Objects.GitSubBucketType, AmpScm.Buckets.Bucket!, System.Threading.Tasks.ValueTask>? handleSubBucket) -> void
AmpScm.Buckets.Git.Objects.GitSubBucketType
AmpScm.Buckets.Git.Objects.GitSubBucketType.MergeTag = 0 -> AmpScm.Buckets.Git.Objects.GitSubBucketType
AmpScm.Buckets.Git.Objects.GitSubBucketType.Signature = 1 -> AmpScm.Buckets.Git.Objects.GitSubBucketType
AmpScm.Buckets.Git.Objects.GitSubBucketType.SignatureSha256 = 2 -> AmpScm.Buckets.Git.Objects.GitSubBucketType
AmpScm.Buckets.Git.Objects.GitTagObjectBucket.GitTagObjectBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.Objects.GitTagObjectBucket.GitTagObjectBucket(AmpScm.Buckets.Bucket! source, System.Func<AmpScm.Buckets.Git.Objects.GitSubBucketType, AmpScm.Buckets.Bucket!, System.Threading.Tasks.ValueTask>? handleSubBucket) -> void
AmpScm.Buckets.Git.Objects.GitTagObjectBucket.ReadSignatureBytesAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
AmpScm.Buckets.Git.Objects.GitTreeObjectBucket.GitTreeObjectBucket(AmpScm.Buckets.Bucket! source, AmpScm.Git.GitIdType idType) -> void
override AmpScm.Buckets.Git.GitBundleBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitFileObjectBucket.Duplicate(bool reset = false) -> AmpScm.Buckets.Bucket!
override AmpScm.Buckets.Git.GitLineIndentBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Git.GitLineIndentBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitLineUnindentBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Git.GitLineUnindentBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitLineUnindentBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
static AmpScm.Buckets.Git.GitCommitGenerationValue.FromValue(ulong value, long offset) -> AmpScm.Buckets.Git.GitCommitGenerationValue
static AmpScm.Buckets.Git.GitDirectoryEntry.operator <(AmpScm.Buckets.Git.GitDirectoryEntry! left, AmpScm.Buckets.Git.GitDirectoryEntry! right) -> bool
static AmpScm.Buckets.Git.GitDirectoryEntry.operator <=(AmpScm.Buckets.Git.GitDirectoryEntry! left, AmpScm.Buckets.Git.GitDirectoryEntry! right) -> bool
static AmpScm.Buckets.Git.GitDirectoryEntry.operator >(AmpScm.Buckets.Git.GitDirectoryEntry! left, AmpScm.Buckets.Git.GitDirectoryEntry! right) -> bool
static AmpScm.Buckets.Git.GitDirectoryEntry.operator >=(AmpScm.Buckets.Git.GitDirectoryEntry! left, AmpScm.Buckets.Git.GitDirectoryEntry! right) -> bool
static AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.ForSignature(AmpScm.Buckets.Bucket! src) -> AmpScm.Buckets.Bucket!
static AmpScm.Buckets.Git.Objects.GitTagObjectBucket.ForSignature(AmpScm.Buckets.Bucket! src) -> AmpScm.Buckets.Bucket!
static AmpScm.Git.GitId.Zero(AmpScm.Git.GitIdType type) -> AmpScm.Git.GitId!
static readonly AmpScm.Buckets.Git.GitDirectoryBucket.HighestSupportedFormat -> int
static readonly AmpScm.Buckets.Git.GitDirectoryBucket.LowestSupportedFormat -> int

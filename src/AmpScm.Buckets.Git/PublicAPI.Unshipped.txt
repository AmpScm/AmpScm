#nullable enable
abstract AmpScm.Buckets.Git.GitObjectBucket.SeekAsync(long newPosition) -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.Git.GitDirectoryBucket
AmpScm.Buckets.Git.GitDirectoryBucket.GitDirectoryBucket(AmpScm.Buckets.Bucket! inner) -> void
AmpScm.Buckets.Git.GitDirectoryBucket.GitDirectoryBucket(AmpScm.Buckets.Bucket! inner, AmpScm.Buckets.Git.GitDirectoryOptions? options) -> void
AmpScm.Buckets.Git.GitDirectoryBucket.GitDirectoryBucket(string! gitDirectory) -> void
AmpScm.Buckets.Git.GitDirectoryBucket.GitDirectoryBucket(string! gitDirectory, AmpScm.Buckets.Git.GitDirectoryOptions? options) -> void
AmpScm.Buckets.Git.GitDirectoryBucket.IndexVersion.get -> int?
AmpScm.Buckets.Git.GitDirectoryBucket.ProcessExtensionsAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.Git.GitDirectoryBucket.ReadEntryAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitDirectoryEntry?>
AmpScm.Buckets.Git.GitDirectoryBucket.ReadHeaderAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Buckets.Git.GitDirectoryEntry
AmpScm.Buckets.Git.GitDirectoryEntry.CompareTo(AmpScm.Buckets.Git.GitDirectoryEntry? other) -> int
AmpScm.Buckets.Git.GitDirectoryEntry.CreationTime.get -> System.DateTime
AmpScm.Buckets.Git.GitDirectoryEntry.DeviceId.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.DeviceId.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.Flags.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.Flags.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.GroupId.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.GroupId.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.Id.get -> AmpScm.Git.GitId!
AmpScm.Buckets.Git.GitDirectoryEntry.Id.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.INodeId.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.INodeId.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.ModificationTime.get -> System.DateTime
AmpScm.Buckets.Git.GitDirectoryEntry.Name.get -> string!
AmpScm.Buckets.Git.GitDirectoryEntry.Name.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.Stage.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.TruncatedFileSize.get -> uint
AmpScm.Buckets.Git.GitDirectoryEntry.TruncatedFileSize.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.Type.get -> AmpScm.Git.GitTreeElementType
AmpScm.Buckets.Git.GitDirectoryEntry.Type.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UnixCreationTime.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UnixCreationTime.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UnixCreationTimeNano.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UnixCreationTimeNano.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UnixModificationTime.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UnixModificationTime.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UnixModificationTimeNano.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UnixModificationTimeNano.init -> void
AmpScm.Buckets.Git.GitDirectoryEntry.UserId.get -> int
AmpScm.Buckets.Git.GitDirectoryEntry.UserId.init -> void
AmpScm.Buckets.Git.GitDirectoryOptions
AmpScm.Buckets.Git.GitDirectoryOptions.GitDirectoryOptions() -> void
AmpScm.Buckets.Git.GitDirectoryOptions.IdType.get -> AmpScm.Git.GitIdType
AmpScm.Buckets.Git.GitDirectoryOptions.IdType.set -> void
AmpScm.Buckets.Git.GitDirectoryOptions.LookForEndOfIndex.get -> bool
AmpScm.Buckets.Git.GitDirectoryOptions.LookForEndOfIndex.set -> void
AmpScm.Buckets.Git.GitDirectoryOptions.PreLoadExtensions.get -> bool
AmpScm.Buckets.Git.GitDirectoryOptions.PreLoadExtensions.set -> void
AmpScm.Buckets.Git.GitEwahBitmapBucket.AllBits.get -> System.Collections.Generic.IAsyncEnumerable<bool>!
AmpScm.Buckets.Git.GitEwahBitmapBucket.ReadLengthAsync() -> System.Threading.Tasks.ValueTask<int>
AmpScm.Buckets.Git.GitEwahBitmapBucket.SetIndexes.get -> System.Collections.Generic.IAsyncEnumerable<int>!
AmpScm.Buckets.Git.GitLineIndentBucket
AmpScm.Buckets.Git.GitLineIndentBucket.GitLineIndentBucket(AmpScm.Buckets.Bucket! inner, AmpScm.Buckets.BucketEol acceptableEols = AmpScm.Buckets.BucketEol.LF) -> void
AmpScm.Buckets.Git.GitLineUnindentBucket
AmpScm.Buckets.Git.GitLineUnindentBucket.GitLineUnindentBucket(AmpScm.Buckets.Bucket! inner, AmpScm.Buckets.BucketEol acceptableEols = AmpScm.Buckets.BucketEol.LF) -> void
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.GitCommitObjectBucket(AmpScm.Buckets.Bucket! inner, System.Func<AmpScm.Buckets.Git.Objects.GitCommitSubBucket, AmpScm.Buckets.Bucket!, System.Threading.Tasks.ValueTask>? handleSubBucket) -> void
AmpScm.Buckets.Git.Objects.GitCommitSubBucket
AmpScm.Buckets.Git.Objects.GitCommitSubBucket.GpgSignature = 1 -> AmpScm.Buckets.Git.Objects.GitCommitSubBucket
AmpScm.Buckets.Git.Objects.GitCommitSubBucket.GpgSignatureSha256 = 2 -> AmpScm.Buckets.Git.Objects.GitCommitSubBucket
AmpScm.Buckets.Git.Objects.GitCommitSubBucket.MergeTag = 0 -> AmpScm.Buckets.Git.Objects.GitCommitSubBucket
override AmpScm.Buckets.Git.GitLineIndentBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Git.GitLineIndentBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitLineUnindentBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Git.GitLineUnindentBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitLineUnindentBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
static AmpScm.Buckets.Git.GitCommitGenerationValue.FromValue(ulong value, long offset) -> AmpScm.Buckets.Git.GitCommitGenerationValue
static AmpScm.Buckets.Git.GitDirectoryEntry.operator <(AmpScm.Buckets.Git.GitDirectoryEntry! left, AmpScm.Buckets.Git.GitDirectoryEntry! right) -> bool
static AmpScm.Buckets.Git.GitDirectoryEntry.operator <=(AmpScm.Buckets.Git.GitDirectoryEntry! left, AmpScm.Buckets.Git.GitDirectoryEntry! right) -> bool
static AmpScm.Buckets.Git.GitDirectoryEntry.operator >(AmpScm.Buckets.Git.GitDirectoryEntry! left, AmpScm.Buckets.Git.GitDirectoryEntry! right) -> bool
static AmpScm.Buckets.Git.GitDirectoryEntry.operator >=(AmpScm.Buckets.Git.GitDirectoryEntry! left, AmpScm.Buckets.Git.GitDirectoryEntry! right) -> bool
static AmpScm.Buckets.Git.GpgLikeSignatureBucket.IsHeader(AmpScm.Buckets.BucketBytes bb, AmpScm.Buckets.BucketEol eol) -> bool
static AmpScm.Git.GitId.Zero(AmpScm.Git.GitIdType type) -> AmpScm.Git.GitId!
static readonly AmpScm.Buckets.Git.GitDirectoryBucket.HighestSupportedFormat -> int
static readonly AmpScm.Buckets.Git.GitDirectoryBucket.LowestSupportedFormat -> int

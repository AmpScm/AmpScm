#nullable enable
abstract AmpScm.Buckets.Git.GitObjectBucket.ReadTypeAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitObjectType>
AmpScm.Buckets.Git.GitBitmapHeaderBucket
AmpScm.Buckets.Git.GitBitmapHeaderBucket.BitmapType.get -> string?
AmpScm.Buckets.Git.GitBitmapHeaderBucket.Flags.get -> int?
AmpScm.Buckets.Git.GitBitmapHeaderBucket.GitBitmapHeaderBucket(AmpScm.Buckets.Bucket! source, AmpScm.Git.GitIdType idType) -> void
AmpScm.Buckets.Git.GitBitmapHeaderBucket.ObjectCount.get -> int?
AmpScm.Buckets.Git.GitBitmapHeaderBucket.Version.get -> int?
AmpScm.Buckets.Git.GitBucket
AmpScm.Buckets.Git.GitBucket.GitBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitBucketException
AmpScm.Buckets.Git.GitBucketException.GitBucketException() -> void
AmpScm.Buckets.Git.GitBucketException.GitBucketException(string? message) -> void
AmpScm.Buckets.Git.GitBucketException.GitBucketException(string? message, System.Exception? innerException) -> void
AmpScm.Buckets.Git.GitBucketException.GitBucketException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
AmpScm.Buckets.Git.GitCommitGenerationValue
AmpScm.Buckets.Git.GitCommitGenerationValue.CommitTime.get -> System.DateTimeOffset
AmpScm.Buckets.Git.GitCommitGenerationValue.CommitTimeValue.get -> long
AmpScm.Buckets.Git.GitCommitGenerationValue.CorrectedTime.get -> System.DateTimeOffset
AmpScm.Buckets.Git.GitCommitGenerationValue.CorrectedTimeValue.get -> long
AmpScm.Buckets.Git.GitCommitGenerationValue.Equals(AmpScm.Buckets.Git.GitCommitGenerationValue other) -> bool
AmpScm.Buckets.Git.GitCommitGenerationValue.Generation.get -> int
AmpScm.Buckets.Git.GitCommitGenerationValue.GitCommitGenerationValue() -> void
AmpScm.Buckets.Git.GitCommitGenerationValue.GitCommitGenerationValue(int generation, long timeValue) -> void
AmpScm.Buckets.Git.GitCommitGenerationValue.GitCommitGenerationValue(int generation, long timeValue, long correctedTimeOffset) -> void
AmpScm.Buckets.Git.GitCommitGenerationValue.GitCommitGenerationValue(int generation, System.DateTimeOffset timeStamp) -> void
AmpScm.Buckets.Git.GitCommitGenerationValue.GitCommitGenerationValue(int generation, System.DateTimeOffset timeStamp, long correctedTimeOffset) -> void
AmpScm.Buckets.Git.GitCommitGenerationValue.HasTimeCorrection.get -> bool
AmpScm.Buckets.Git.GitCommitGenerationValue.HasValue.get -> bool
AmpScm.Buckets.Git.GitCommitGenerationValue.Value.get -> ulong
AmpScm.Buckets.Git.GitConfigurationBucket
AmpScm.Buckets.Git.GitConfigurationBucket.GitConfigurationBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitConfigurationBucket.ReadRecord() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitConfigurationRecord?>
AmpScm.Buckets.Git.GitConfigurationRecord
AmpScm.Buckets.Git.GitConfigurationRecord.CompareTo(AmpScm.Buckets.Git.GitConfigurationRecord? other) -> int
AmpScm.Buckets.Git.GitConfigurationRecord.Group.get -> string!
AmpScm.Buckets.Git.GitConfigurationRecord.Group.set -> void
AmpScm.Buckets.Git.GitConfigurationRecord.Key.get -> string!
AmpScm.Buckets.Git.GitConfigurationRecord.Key.set -> void
AmpScm.Buckets.Git.GitConfigurationRecord.SubGroup.get -> string?
AmpScm.Buckets.Git.GitConfigurationRecord.SubGroup.set -> void
AmpScm.Buckets.Git.GitConfigurationRecord.Value.get -> string?
AmpScm.Buckets.Git.GitConfigurationRecord.Value.set -> void
AmpScm.Buckets.Git.GitEwahBitmapBucket
AmpScm.Buckets.Git.GitEwahBitmapBucket.GitEwahBitmapBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitEwahBitmapBucket.ReadBitLengthAsync() -> System.Threading.Tasks.ValueTask<int>
AmpScm.Buckets.Git.GitFileObjectBucket
AmpScm.Buckets.Git.GitFileObjectBucket.GitFileObjectBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitIndexer
AmpScm.Buckets.Git.GitObjectBucket
AmpScm.Buckets.Git.GitObjectBucket.GitObjectBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitPacketBucket
AmpScm.Buckets.Git.GitPacketBucket.CurrentPacketLength.get -> int
AmpScm.Buckets.Git.GitPacketBucket.GitPacketBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitPacketBucket.ReadFullPacket() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
AmpScm.Buckets.Git.GitPackHeaderBucket
AmpScm.Buckets.Git.GitPackHeaderBucket.GitPackHeaderBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitPackHeaderBucket.GitType.get -> string?
AmpScm.Buckets.Git.GitPackHeaderBucket.ObjectCount.get -> long?
AmpScm.Buckets.Git.GitPackHeaderBucket.Version.get -> int?
AmpScm.Buckets.Git.GitPackObjectBucket
AmpScm.Buckets.Git.GitPackObjectBucket.BodySize.get -> long?
AmpScm.Buckets.Git.GitPackObjectBucket.GitPackObjectBucket(AmpScm.Buckets.Bucket! source, AmpScm.Git.GitIdType idType, System.Func<AmpScm.Git.GitId!, System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitObjectBucket?>>? fetchBucketById = null, System.Func<long, System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitObjectBucket!>>? fetchBucketByOffset = null) -> void
AmpScm.Buckets.Git.GitPackObjectBucket.ReadDeltaCountAsync() -> System.Threading.Tasks.ValueTask<int>
AmpScm.Buckets.Git.GitReadExtensions
AmpScm.Buckets.Git.GitReferenceLogBucket
AmpScm.Buckets.Git.GitReferenceLogBucket.GitReferenceLogBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.GitReferenceLogBucket.ReadGitReferenceLogRecordAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitReferenceLogRecord?>
AmpScm.Buckets.Git.GitReferenceLogRecord
AmpScm.Buckets.Git.GitReferenceLogRecord.Original.get -> AmpScm.Git.GitId!
AmpScm.Buckets.Git.GitReferenceLogRecord.Original.init -> void
AmpScm.Buckets.Git.GitReferenceLogRecord.Reason.get -> string?
AmpScm.Buckets.Git.GitReferenceLogRecord.Reason.init -> void
AmpScm.Buckets.Git.GitReferenceLogRecord.Signature.get -> AmpScm.Buckets.Git.GitSignatureRecord!
AmpScm.Buckets.Git.GitReferenceLogRecord.Signature.init -> void
AmpScm.Buckets.Git.GitReferenceLogRecord.Target.get -> AmpScm.Git.GitId!
AmpScm.Buckets.Git.GitReferenceLogRecord.Target.init -> void
AmpScm.Buckets.Git.GitSignatureRecord
AmpScm.Buckets.Git.GitSignatureRecord.Email.get -> string!
AmpScm.Buckets.Git.GitSignatureRecord.Email.init -> void
AmpScm.Buckets.Git.GitSignatureRecord.Name.get -> string!
AmpScm.Buckets.Git.GitSignatureRecord.Name.init -> void
AmpScm.Buckets.Git.GitSignatureRecord.When.get -> System.DateTimeOffset
AmpScm.Buckets.Git.GitSignatureRecord.When.init -> void
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.GitCommitObjectBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.ReadAllParentIdsAsync() -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyCollection<AmpScm.Git.GitId!>!>
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.ReadAuthorAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitSignatureRecord!>
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.ReadCommitterAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitSignatureRecord!>
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.ReadFirstParentIdAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId?>
AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.ReadTreeIdAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId!>
AmpScm.Buckets.Git.Objects.GitTagObjectBucket
AmpScm.Buckets.Git.Objects.GitTagObjectBucket.GitTagObjectBucket(AmpScm.Buckets.Bucket! source) -> void
AmpScm.Buckets.Git.Objects.GitTagObjectBucket.ReadObjectIdAsync() -> System.Threading.Tasks.ValueTask<(AmpScm.Git.GitId!, AmpScm.Git.GitObjectType)>
AmpScm.Buckets.Git.Objects.GitTagObjectBucket.ReadTaggerAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitSignatureRecord!>
AmpScm.Buckets.Git.Objects.GitTagObjectBucket.ReadTagNameAsync() -> System.Threading.Tasks.ValueTask<string!>
AmpScm.Buckets.Git.Objects.GitTreeElementRecord
AmpScm.Buckets.Git.Objects.GitTreeElementRecord.AsBucket() -> AmpScm.Buckets.Bucket!
AmpScm.Buckets.Git.Objects.GitTreeElementRecord.Id.get -> AmpScm.Git.GitId!
AmpScm.Buckets.Git.Objects.GitTreeElementRecord.Id.init -> void
AmpScm.Buckets.Git.Objects.GitTreeElementRecord.Name.get -> string!
AmpScm.Buckets.Git.Objects.GitTreeElementRecord.Name.init -> void
AmpScm.Buckets.Git.Objects.GitTreeElementRecord.Type.get -> AmpScm.Git.GitTreeElementType
AmpScm.Buckets.Git.Objects.GitTreeElementRecord.Type.init -> void
AmpScm.Buckets.Git.Objects.GitTreeObjectBucket
AmpScm.Buckets.Git.Objects.GitTreeObjectBucket.GitTreeObjectBucket(AmpScm.Buckets.Bucket! source, AmpScm.Git.GitIdType idType) -> void
AmpScm.Buckets.Git.Objects.GitTreeObjectBucket.ReadTreeElementRecord() -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.Objects.GitTreeElementRecord?>
AmpScm.Git.GitBucketExtensions
AmpScm.Git.GitException
AmpScm.Git.GitException.GitException() -> void
AmpScm.Git.GitException.GitException(string? message) -> void
AmpScm.Git.GitException.GitException(string? message, System.Exception? innerException) -> void
AmpScm.Git.GitException.GitException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
AmpScm.Git.GitId
AmpScm.Git.GitId.CompareTo(AmpScm.Git.GitId? other) -> int
AmpScm.Git.GitId.Equals(AmpScm.Git.GitId? other) -> bool
AmpScm.Git.GitId.GitId(AmpScm.Git.GitIdType type, byte[]! hash) -> void
AmpScm.Git.GitId.GitId(string! value) -> void
AmpScm.Git.GitId.Hash.get -> System.ReadOnlyMemory<byte>
AmpScm.Git.GitId.IsZero.get -> bool
AmpScm.Git.GitId.this[int index].get -> byte
AmpScm.Git.GitId.ToString(string? format) -> string!
AmpScm.Git.GitId.Type.get -> AmpScm.Git.GitIdType
AmpScm.Git.GitIdType
AmpScm.Git.GitIdType.None = 0 -> AmpScm.Git.GitIdType
AmpScm.Git.GitIdType.Sha1 = 1 -> AmpScm.Git.GitIdType
AmpScm.Git.GitIdType.Sha256 = 2 -> AmpScm.Git.GitIdType
AmpScm.Git.GitObjectType
AmpScm.Git.GitObjectType.Blob = 3 -> AmpScm.Git.GitObjectType
AmpScm.Git.GitObjectType.Commit = 1 -> AmpScm.Git.GitObjectType
AmpScm.Git.GitObjectType.None = 0 -> AmpScm.Git.GitObjectType
AmpScm.Git.GitObjectType.Tag = 4 -> AmpScm.Git.GitObjectType
AmpScm.Git.GitObjectType.Tree = 2 -> AmpScm.Git.GitObjectType
AmpScm.Git.GitTreeElementType
AmpScm.Git.GitTreeElementType.Directory = 16384 -> AmpScm.Git.GitTreeElementType
AmpScm.Git.GitTreeElementType.File = 33188 -> AmpScm.Git.GitTreeElementType
AmpScm.Git.GitTreeElementType.FileExecutable = 33261 -> AmpScm.Git.GitTreeElementType
AmpScm.Git.GitTreeElementType.GitCommitLink = 57344 -> AmpScm.Git.GitTreeElementType
AmpScm.Git.GitTreeElementType.None = 0 -> AmpScm.Git.GitTreeElementType
AmpScm.Git.GitTreeElementType.SymbolicLink = 40960 -> AmpScm.Git.GitTreeElementType
override AmpScm.Buckets.Git.GitBitmapHeaderBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitCommitGenerationValue.Equals(object? obj) -> bool
override AmpScm.Buckets.Git.GitCommitGenerationValue.GetHashCode() -> int
override AmpScm.Buckets.Git.GitConfigurationBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitConfigurationRecord.ToString() -> string!
override AmpScm.Buckets.Git.GitDirectoryBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitEwahBitmapBucket.CanReset.get -> bool
override AmpScm.Buckets.Git.GitEwahBitmapBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Git.GitEwahBitmapBucket.Position.get -> long?
override AmpScm.Buckets.Git.GitEwahBitmapBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitEwahBitmapBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.Git.GitEwahBitmapBucket.Reset() -> void
override AmpScm.Buckets.Git.GitFileObjectBucket.CanReset.get -> bool
override AmpScm.Buckets.Git.GitFileObjectBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Git.GitFileObjectBucket.Position.get -> long?
override AmpScm.Buckets.Git.GitFileObjectBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitFileObjectBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.Git.GitFileObjectBucket.ReadTypeAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitObjectType>
override AmpScm.Buckets.Git.GitFileObjectBucket.Reset() -> void
override AmpScm.Buckets.Git.GitFileObjectBucket.SeekAsync(long newPosition) -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.Git.GitPacketBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitPackHeaderBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitPackObjectBucket.CanReset.get -> bool
override AmpScm.Buckets.Git.GitPackObjectBucket.Name.get -> string!
override AmpScm.Buckets.Git.GitPackObjectBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Git.GitPackObjectBucket.Position.get -> long?
override AmpScm.Buckets.Git.GitPackObjectBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitPackObjectBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.Git.GitPackObjectBucket.ReadSkipAsync(long requested) -> System.Threading.Tasks.ValueTask<long>
override AmpScm.Buckets.Git.GitPackObjectBucket.ReadTypeAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitObjectType>
override AmpScm.Buckets.Git.GitPackObjectBucket.Reset() -> void
override AmpScm.Buckets.Git.GitPackObjectBucket.SeekAsync(long newPosition) -> System.Threading.Tasks.ValueTask
override AmpScm.Buckets.Git.GitReferenceLogBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.GitReferenceLogRecord.ToString() -> string!
override AmpScm.Buckets.Git.GitSignatureRecord.ToString() -> string!
override AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.Objects.GitCommitObjectBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.Git.Objects.GitTagObjectBucket.Peek() -> AmpScm.Buckets.BucketBytes
override AmpScm.Buckets.Git.Objects.GitTagObjectBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Buckets.Git.Objects.GitTagObjectBucket.ReadRemainingBytesAsync() -> System.Threading.Tasks.ValueTask<long?>
override AmpScm.Buckets.Git.Objects.GitTreeObjectBucket.ReadAsync(int requested = 2146435071) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.BucketBytes>
override AmpScm.Git.GitId.Equals(object? obj) -> bool
override AmpScm.Git.GitId.GetHashCode() -> int
override AmpScm.Git.GitId.ToString() -> string!
static AmpScm.Buckets.Git.GitCommitGenerationValue.FromValue(ulong value) -> AmpScm.Buckets.Git.GitCommitGenerationValue
static AmpScm.Buckets.Git.GitCommitGenerationValue.operator !=(AmpScm.Buckets.Git.GitCommitGenerationValue left, AmpScm.Buckets.Git.GitCommitGenerationValue right) -> bool
static AmpScm.Buckets.Git.GitCommitGenerationValue.operator ==(AmpScm.Buckets.Git.GitCommitGenerationValue left, AmpScm.Buckets.Git.GitCommitGenerationValue right) -> bool
static AmpScm.Buckets.Git.GitConfigurationRecord.operator <(AmpScm.Buckets.Git.GitConfigurationRecord! left, AmpScm.Buckets.Git.GitConfigurationRecord! right) -> bool
static AmpScm.Buckets.Git.GitConfigurationRecord.operator <=(AmpScm.Buckets.Git.GitConfigurationRecord! left, AmpScm.Buckets.Git.GitConfigurationRecord! right) -> bool
static AmpScm.Buckets.Git.GitConfigurationRecord.operator >(AmpScm.Buckets.Git.GitConfigurationRecord! left, AmpScm.Buckets.Git.GitConfigurationRecord! right) -> bool
static AmpScm.Buckets.Git.GitConfigurationRecord.operator >=(AmpScm.Buckets.Git.GitConfigurationRecord! left, AmpScm.Buckets.Git.GitConfigurationRecord! right) -> bool
static AmpScm.Buckets.Git.GitIndexer.IndexPack(string! packFile, bool writeReverseIndex = false, bool writeBitmap = false, AmpScm.Git.GitIdType idType = AmpScm.Git.GitIdType.Sha1, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId!>
static AmpScm.Buckets.Git.GitReadExtensions.ReadGitDeltaOffsetAsync(this AmpScm.Buckets.Bucket! bucket) -> System.Threading.Tasks.ValueTask<long>
static AmpScm.Buckets.Git.GitReadExtensions.ReadGitDeltaSize(this AmpScm.Buckets.Bucket! bucket) -> System.Threading.Tasks.ValueTask<long>
static AmpScm.Buckets.Git.GitReadExtensions.ReadGitIdAsync(this AmpScm.Buckets.Bucket! bucket, AmpScm.Git.GitIdType type) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId!>
static AmpScm.Buckets.Git.GitReadExtensions.SplitToUtf8String(this AmpScm.Buckets.BucketBytes bytes, byte separator, int count) -> string![]!
static AmpScm.Buckets.Git.GitSignatureRecord.TryReadFromBucket(AmpScm.Buckets.BucketBytes bucketBytes, out AmpScm.Buckets.Git.GitSignatureRecord? record) -> bool
static AmpScm.Git.GitBucketExtensions.CreateHeader(this AmpScm.Git.GitObjectType type, long length) -> AmpScm.Buckets.Bucket!
static AmpScm.Git.GitBucketExtensions.GitHash(this AmpScm.Buckets.Bucket! bucket, AmpScm.Git.GitIdType type, System.Action<AmpScm.Git.GitId!>! created) -> AmpScm.Buckets.Bucket!
static AmpScm.Git.GitBucketExtensions.HashLength(this AmpScm.Git.GitIdType type) -> int
static AmpScm.Git.GitBucketExtensions.IsDirectory(this AmpScm.Git.GitTreeElementType elementType) -> bool
static AmpScm.Git.GitBucketExtensions.IsFile(this AmpScm.Git.GitTreeElementType elementType) -> bool
static AmpScm.Git.GitId.FromByteArrayOffset(AmpScm.Git.GitIdType type, byte[]! hash, int offset) -> AmpScm.Git.GitId!
static AmpScm.Git.GitId.HashLength(AmpScm.Git.GitIdType type) -> int
static AmpScm.Git.GitId.operator !=(AmpScm.Git.GitId? one, AmpScm.Git.GitId? other) -> bool
static AmpScm.Git.GitId.operator <(AmpScm.Git.GitId! left, AmpScm.Git.GitId! right) -> bool
static AmpScm.Git.GitId.operator <=(AmpScm.Git.GitId! left, AmpScm.Git.GitId! right) -> bool
static AmpScm.Git.GitId.operator ==(AmpScm.Git.GitId? one, AmpScm.Git.GitId? other) -> bool
static AmpScm.Git.GitId.operator >(AmpScm.Git.GitId! left, AmpScm.Git.GitId! right) -> bool
static AmpScm.Git.GitId.operator >=(AmpScm.Git.GitId! left, AmpScm.Git.GitId! right) -> bool
static AmpScm.Git.GitId.Parse(string! idString) -> AmpScm.Git.GitId!
static AmpScm.Git.GitId.StringToByteArray(string! hex) -> byte[]!
static AmpScm.Git.GitId.TryParse(AmpScm.Buckets.BucketBytes idBuffer, out AmpScm.Git.GitId? id) -> bool
static AmpScm.Git.GitId.TryParse(string! idString, out AmpScm.Git.GitId? id) -> bool
static readonly AmpScm.Git.GitId.MaxHashLength -> int

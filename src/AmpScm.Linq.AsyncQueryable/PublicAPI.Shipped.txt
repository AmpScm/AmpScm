#nullable enable
~static System.Linq.AmpAsyncQueryable.Cast<TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable source) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.Concat<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.DefaultIfEmpty<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.DefaultIfEmpty<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, TSource defaultValue) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Distinct<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Distinct<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Except<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Except<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.GroupBy<TSource, TKey, TElement, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>> resultSelector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.GroupBy<TSource, TKey, TElement, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.GroupBy<TSource, TKey, TElement>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector) -> AmpScm.Linq.ISyncAndAsyncQueryable<System.Linq.IGrouping<TKey, TElement>>
~static System.Linq.AmpAsyncQueryable.GroupBy<TSource, TKey, TElement>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<System.Linq.IGrouping<TKey, TElement>>
~static System.Linq.AmpAsyncQueryable.GroupBy<TSource, TKey, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>> resultSelector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.GroupBy<TSource, TKey, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.GroupBy<TSource, TKey>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) -> AmpScm.Linq.ISyncAndAsyncQueryable<System.Linq.IGrouping<TKey, TSource>>
~static System.Linq.AmpAsyncQueryable.GroupBy<TSource, TKey>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<System.Linq.IGrouping<TKey, TSource>>
~static System.Linq.AmpAsyncQueryable.GroupJoin<TOuter, TInner, TKey, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner, TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>> resultSelector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.GroupJoin<TOuter, TInner, TKey, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner, TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.Intersect<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Intersect<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Join<TOuter, TInner, TKey, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner, TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>> resultSelector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.Join<TOuter, TInner, TKey, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner, TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.OfType<TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable source) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.OrderBy<TSource, TKey>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) -> AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.OrderBy<TSource, TKey>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) -> AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.OrderByDescending<TSource, TKey>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) -> AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.OrderByDescending<TSource, TKey>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) -> AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Reverse<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Select<TSource, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, TResult>> selector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.Select<TSource, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.SelectMany<TSource, TCollection, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.SelectMany<TSource, TCollection, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.SelectMany<TSource, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, System.Collections.Generic.IEnumerable<TResult>>> selector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.SelectMany<TSource, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>> selector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
~static System.Linq.AmpAsyncQueryable.Skip<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, int count) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.SkipWhile<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.SkipWhile<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>> predicate) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Take<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, int count) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.TakeWhile<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.TakeWhile<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>> predicate) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.ThenBy<TSource, TKey>(this AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) -> AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.ThenBy<TSource, TKey>(this AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) -> AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.ThenByDescending<TSource, TKey>(this AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) -> AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.ThenByDescending<TSource, TKey>(this AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) -> AmpScm.Linq.IOrderedSyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Union<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Union<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Where<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Where<TSource>(this AmpScm.Linq.ISyncAndAsyncQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, int, bool>> predicate) -> AmpScm.Linq.ISyncAndAsyncQueryable<TSource>
~static System.Linq.AmpAsyncQueryable.Zip<TFirst, TSecond, TResult>(this AmpScm.Linq.ISyncAndAsyncQueryable<TFirst> source1, System.Collections.Generic.IEnumerable<TSecond> source2, System.Linq.Expressions.Expression<System.Func<TFirst, TSecond, TResult>> resultSelector) -> AmpScm.Linq.ISyncAndAsyncQueryable<TResult>
abstract AmpScm.Linq.SyncAndAsyncQueryProvider.CreateQuery<TElement>(System.Linq.Expressions.Expression! expression) -> AmpScm.Linq.ISyncAndAsyncQueryable<TElement>!
abstract AmpScm.Linq.SyncAndAsyncQueryProvider.Execute(System.Linq.Expressions.Expression! expression) -> object?
abstract AmpScm.Linq.SyncAndAsyncQueryProvider.Execute<TResult>(System.Linq.Expressions.Expression! expression) -> TResult
AmpScm.Linq.IOrderedSyncAndAsyncQueryable
AmpScm.Linq.IOrderedSyncAndAsyncQueryable<T>
AmpScm.Linq.ISyncAndAsyncQueryable
AmpScm.Linq.ISyncAndAsyncQueryable<T>
AmpScm.Linq.ISyncAndAsyncQueryProvider
AmpScm.Linq.SyncAndAsyncQueryProvider
AmpScm.Linq.SyncAndAsyncQueryProvider.SyncAndAsyncQueryProvider() -> void
static System.Linq.AmpAsyncQueryable.AsSyncAndAsyncQueryable(this System.Linq.IQueryable! queryable) -> AmpScm.Linq.ISyncAndAsyncQueryable!
static System.Linq.AmpAsyncQueryable.AsSyncAndAsyncQueryable<T>(this System.Collections.Generic.IEnumerable<T>! enumerable) -> AmpScm.Linq.ISyncAndAsyncQueryable<T>!
static System.Linq.AmpAsyncQueryable.AsSyncAndAsyncQueryable<T>(this System.Linq.IQueryable<T>! queryable) -> AmpScm.Linq.ISyncAndAsyncQueryable<T>!
System.Linq.AmpAsyncQueryable
virtual AmpScm.Linq.SyncAndAsyncQueryProvider.CreateQuery(System.Linq.Expressions.Expression! expression) -> AmpScm.Linq.ISyncAndAsyncQueryable!
virtual AmpScm.Linq.SyncAndAsyncQueryProvider.ExecuteAsync<TResult>(System.Linq.Expressions.Expression! expression, System.Threading.CancellationToken token) -> System.Threading.Tasks.ValueTask<TResult>

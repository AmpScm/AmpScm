abstract AmpScm.Git.GitObject.Type.get -> AmpScm.Git.GitObjectType
abstract AmpScm.Git.GitTreeEntry.GitObject.get -> AmpScm.Git.GitObject!
abstract AmpScm.Git.GitTreeEntry.ReadAsync() -> System.Threading.Tasks.ValueTask
abstract AmpScm.Git.Objects.GitObjectWriter.Type.get -> AmpScm.Git.GitObjectType
abstract AmpScm.Git.Objects.GitObjectWriter.WriteToAsync(AmpScm.Git.GitRepository! repository) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId!>
abstract AmpScm.Git.References.GitReferenceRepository.GetAll(System.Collections.Generic.HashSet<string!>! alreadyReturned) -> System.Collections.Generic.IAsyncEnumerable<AmpScm.Git.GitReference!>!
abstract AmpScm.Git.References.GitReferenceRepository.GetUnsafeAsync(string! name) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitReference?>
abstract AmpScm.Git.References.GitReferenceUpdateTransaction.CommitAsync() -> System.Threading.Tasks.ValueTask
abstract AmpScm.Git.Repository.GitBackendRepository.Dispose(bool disposing) -> void
abstract AmpScm.Git.Sets.GitSet<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T!>!
AmpScm.Git.GitBlob
AmpScm.Git.GitBlob.AsBucket() -> AmpScm.Buckets.Bucket!
AmpScm.Git.GitBlob.AsStream() -> System.IO.Stream!
AmpScm.Git.GitBlob.Size.get -> long
AmpScm.Git.GitBranch
AmpScm.Git.GitBranch.Reference.get -> AmpScm.Git.GitReference!
AmpScm.Git.GitCommit
AmpScm.Git.GitCommit.Author.get -> AmpScm.Git.GitSignature!
AmpScm.Git.GitCommit.Committer.get -> AmpScm.Git.GitSignature!
AmpScm.Git.GitCommit.Message.get -> string?
AmpScm.Git.GitCommit.Parent.get -> AmpScm.Git.GitCommit?
AmpScm.Git.GitCommit.ParentCount.get -> int
AmpScm.Git.GitCommit.ParentId.get -> AmpScm.Git.GitId?
AmpScm.Git.GitCommit.ParentIds.get -> System.Collections.Generic.IReadOnlyList<AmpScm.Git.GitId!>!
AmpScm.Git.GitCommit.Parents.get -> System.Collections.Generic.IReadOnlyList<AmpScm.Git.GitCommit!>!
AmpScm.Git.GitCommit.Revisions.get -> AmpScm.Git.Sets.GitRevisionSet!
AmpScm.Git.GitCommit.Summary.get -> string?
AmpScm.Git.GitCommit.Tree.get -> AmpScm.Git.GitTree!
AmpScm.Git.GitCommit.TreeId.get -> AmpScm.Git.GitId!
AmpScm.Git.GitDirectoryTreeEntry
AmpScm.Git.GitDirectoryTreeEntry.GitObject.get -> AmpScm.Git.GitTree!
AmpScm.Git.GitDirectoryTreeEntry.Tree.get -> AmpScm.Git.GitTree!
AmpScm.Git.GitFileTreeEntry
AmpScm.Git.GitFileTreeEntry.Blob.get -> AmpScm.Git.GitBlob!
AmpScm.Git.GitFileTreeEntry.GitObject.get -> AmpScm.Git.GitBlob!
AmpScm.Git.GitObject
AmpScm.Git.GitObject.Equals(AmpScm.Git.GitObject? other) -> bool
AmpScm.Git.GitObject.Id.get -> AmpScm.Git.GitId!
AmpScm.Git.GitReference
AmpScm.Git.GitReference.Equals(AmpScm.Git.GitReference? other) -> bool
AmpScm.Git.GitReference.Name.get -> string!
AmpScm.Git.GitReference.ReferenceChanges.get -> AmpScm.Git.Sets.GitReferenceChangeSet!
AmpScm.Git.GitReference.ResolveAsync() -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitReference!>
AmpScm.Git.GitReference.Resolved.get -> AmpScm.Git.GitReference!
AmpScm.Git.GitReference.Revisions.get -> AmpScm.Git.Sets.GitRevisionSet!
AmpScm.Git.GitReference.ShortName.get -> string!
AmpScm.Git.GitReference.Tree.get -> AmpScm.Git.GitTree?
AmpScm.Git.GitReferenceChange
AmpScm.Git.GitReferenceChange.OriginalId.get -> AmpScm.Git.GitId!
AmpScm.Git.GitReferenceChange.Reason.get -> string!
AmpScm.Git.GitReferenceChange.Signature.get -> AmpScm.Git.GitSignature!
AmpScm.Git.GitReferenceChange.TargetId.get -> AmpScm.Git.GitId!
AmpScm.Git.GitRemote
AmpScm.Git.GitRemote.Name.get -> string!
AmpScm.Git.GitRemote.ReadAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Git.GitRemote.Url.get -> System.Uri?
AmpScm.Git.GitRepository
AmpScm.Git.GitRepository.Blobs.get -> AmpScm.Git.Sets.GitObjectSet<AmpScm.Git.GitBlob!>!
AmpScm.Git.GitRepository.Branches.get -> AmpScm.Git.Sets.GitNamedSet<AmpScm.Git.GitBranch!>!
AmpScm.Git.GitRepository.Commits.get -> AmpScm.Git.Sets.GitObjectSet<AmpScm.Git.GitCommit!>!
AmpScm.Git.GitRepository.Configuration.get -> AmpScm.Git.Repository.GitConfiguration!
AmpScm.Git.GitRepository.Dispose() -> void
AmpScm.Git.GitRepository.FullPath.get -> string!
AmpScm.Git.GitRepository.GitDirectory.get -> string!
AmpScm.Git.GitRepository.Head.get -> AmpScm.Git.GitReference!
AmpScm.Git.GitRepository.IsBare.get -> bool
AmpScm.Git.GitRepository.IsHeadDetached.get -> bool
AmpScm.Git.GitRepository.IsLazy.get -> bool
AmpScm.Git.GitRepository.IsShallow.get -> bool
AmpScm.Git.GitRepository.ObjectRepository.get -> AmpScm.Git.Objects.GitObjectRepository!
AmpScm.Git.GitRepository.Objects.get -> AmpScm.Git.Sets.GitObjectSet<AmpScm.Git.GitObject!>!
AmpScm.Git.GitRepository.ReferenceRepository.get -> AmpScm.Git.References.GitReferenceRepository!
AmpScm.Git.GitRepository.References.get -> AmpScm.Git.Sets.GitReferencesSet!
AmpScm.Git.GitRepository.Remotes.get -> AmpScm.Git.Sets.GitRemotesSet!
AmpScm.Git.GitRepository.TagObjects.get -> AmpScm.Git.Sets.GitObjectSet<AmpScm.Git.GitTagObject!>!
AmpScm.Git.GitRepository.Tags.get -> AmpScm.Git.Sets.GitNamedSet<AmpScm.Git.GitTag!>!
AmpScm.Git.GitRepository.Trees.get -> AmpScm.Git.Sets.GitObjectSet<AmpScm.Git.GitTree!>!
AmpScm.Git.GitRepository.WorkTreeDirectory.get -> string!
AmpScm.Git.GitRepositoryException
AmpScm.Git.GitRepositoryException.GitRepositoryException() -> void
AmpScm.Git.GitRepositoryException.GitRepositoryException(string! message) -> void
AmpScm.Git.GitRepositoryException.GitRepositoryException(string! message, System.Exception! innerexception) -> void
AmpScm.Git.GitRepositoryException.GitRepositoryException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
AmpScm.Git.GitRepositoryInitArgs
AmpScm.Git.GitRepositoryInitArgs.Bare.get -> bool
AmpScm.Git.GitRepositoryInitArgs.Bare.set -> void
AmpScm.Git.GitRepositoryInitArgs.GitRepositoryInitArgs() -> void
AmpScm.Git.GitRepositoryInitArgs.IdType.get -> AmpScm.Git.GitIdType?
AmpScm.Git.GitRepositoryInitArgs.IdType.set -> void
AmpScm.Git.GitRepositoryInitArgs.InitialBranchName.get -> string?
AmpScm.Git.GitRepositoryInitArgs.InitialBranchName.set -> void
AmpScm.Git.GitRepositoryInitArgs.InitialConfiguration.get -> System.Collections.Generic.IEnumerable<(string!, string!)>?
AmpScm.Git.GitRepositoryInitArgs.InitialConfiguration.set -> void
AmpScm.Git.GitRevision
AmpScm.Git.GitRevision.Commit.get -> AmpScm.Git.GitCommit!
AmpScm.Git.GitRevision.ReadAsync() -> System.Threading.Tasks.ValueTask
AmpScm.Git.GitSignature
AmpScm.Git.GitSignature.Email.get -> string!
AmpScm.Git.GitSignature.Equals(AmpScm.Git.GitSignature? other) -> bool
AmpScm.Git.GitSignature.GitSignature(string! name, string! email, System.DateTimeOffset now) -> void
AmpScm.Git.GitSignature.Name.get -> string!
AmpScm.Git.GitSignature.When.get -> System.DateTimeOffset
AmpScm.Git.GitTag
AmpScm.Git.GitTag.Message.get -> string?
AmpScm.Git.GitTag.Reference.get -> AmpScm.Git.GitReference!
AmpScm.Git.GitTag.Tagger.get -> AmpScm.Git.GitSignature?
AmpScm.Git.GitTag.TagObject.get -> AmpScm.Git.GitTagObject?
AmpScm.Git.GitTagObject
AmpScm.Git.GitTagObject.GitObject.get -> AmpScm.Git.GitObject!
AmpScm.Git.GitTagObject.Message.get -> string?
AmpScm.Git.GitTagObject.Name.get -> string?
AmpScm.Git.GitTagObject.ObjectType.get -> AmpScm.Git.GitObjectType
AmpScm.Git.GitTagObject.Summary.get -> string?
AmpScm.Git.GitTagObject.Tagger.get -> AmpScm.Git.GitSignature!
AmpScm.Git.GitTools
AmpScm.Git.GitTree
AmpScm.Git.GitTree.AllFiles.get -> AmpScm.Git.Sets.GitTreeItemCollection!
AmpScm.Git.GitTree.AllItems.get -> AmpScm.Git.Sets.GitTreeItemCollection!
AmpScm.Git.GitTree.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerator<AmpScm.Git.GitTreeEntry!>!
AmpScm.Git.GitTree.GetEnumerator() -> System.Collections.Generic.IEnumerator<AmpScm.Git.GitTreeEntry!>!
AmpScm.Git.GitTreeEntry
AmpScm.Git.GitTreeEntry.CompareTo(AmpScm.Git.GitTreeEntry? other) -> int
AmpScm.Git.GitTreeEntry.Equals(AmpScm.Git.GitTreeEntry? other) -> bool
AmpScm.Git.GitTreeEntry.Id.get -> AmpScm.Git.GitId!
AmpScm.Git.GitTreeEntry.Name.get -> string!
AmpScm.Git.GitTreeEntry<TEntry, TObject>
AmpScm.Git.Implementation.GitExecCommandException
AmpScm.Git.Implementation.GitExecCommandException.GitExecCommandException() -> void
AmpScm.Git.Implementation.GitExecCommandException.GitExecCommandException(string! message) -> void
AmpScm.Git.Implementation.GitExecCommandException.GitExecCommandException(string? message, System.Exception? innerException) -> void
AmpScm.Git.Implementation.GitExecCommandException.GitExecCommandException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
AmpScm.Git.Objects.GitBlobWriter
AmpScm.Git.Objects.GitCommitWriter
AmpScm.Git.Objects.GitCommitWriter.Author.get -> AmpScm.Git.GitSignature?
AmpScm.Git.Objects.GitCommitWriter.Author.set -> void
AmpScm.Git.Objects.GitCommitWriter.Committer.get -> AmpScm.Git.GitSignature?
AmpScm.Git.Objects.GitCommitWriter.Committer.set -> void
AmpScm.Git.Objects.GitCommitWriter.Message.get -> string?
AmpScm.Git.Objects.GitCommitWriter.Message.set -> void
AmpScm.Git.Objects.GitCommitWriter.Parents.get -> System.Collections.Generic.IReadOnlyList<AmpScm.Git.Objects.IGitLazy<AmpScm.Git.GitCommit!>!>!
AmpScm.Git.Objects.GitCommitWriter.Parents.set -> void
AmpScm.Git.Objects.GitCommitWriter.Tree.get -> AmpScm.Git.Objects.GitTreeWriter!
AmpScm.Git.Objects.GitCommitWriter.Tree.set -> void
AmpScm.Git.Objects.GitObjectRepository
AmpScm.Git.Objects.GitObjectRepository.FetchGitIdBucketAsync(AmpScm.Git.GitId! id) -> System.Threading.Tasks.ValueTask<AmpScm.Buckets.Git.GitObjectBucket?>
AmpScm.Git.Objects.GitObjectWriter
AmpScm.Git.Objects.GitObjectWriter.GitObjectWriter() -> void
AmpScm.Git.Objects.GitObjectWriter.Id.get -> AmpScm.Git.GitId?
AmpScm.Git.Objects.GitObjectWriter<TGitObject>
AmpScm.Git.Objects.GitObjectWriterExtensions
AmpScm.Git.Objects.GitTagObjectWriter
AmpScm.Git.Objects.GitTagObjectWriter.GitObject.get -> AmpScm.Git.Objects.IGitLazy<AmpScm.Git.GitObject!>!
AmpScm.Git.Objects.GitTagObjectWriter.GitObject.set -> void
AmpScm.Git.Objects.GitTagObjectWriter.Message.get -> string?
AmpScm.Git.Objects.GitTagObjectWriter.Message.set -> void
AmpScm.Git.Objects.GitTagObjectWriter.Name.get -> string!
AmpScm.Git.Objects.GitTagObjectWriter.Name.set -> void
AmpScm.Git.Objects.GitTagObjectWriter.Tagger.get -> AmpScm.Git.GitSignature?
AmpScm.Git.Objects.GitTagObjectWriter.Tagger.set -> void
AmpScm.Git.Objects.GitTreeWriter
AmpScm.Git.Objects.GitTreeWriter.Add<TGitObject>(string! name, AmpScm.Git.Objects.IGitLazy<TGitObject!>! item, AmpScm.Git.GitTreeElementType? setType = null) -> void
AmpScm.Git.Objects.GitTreeWriter.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string!, AmpScm.Git.Objects.IGitLazy<AmpScm.Git.GitObject!>!>>!
AmpScm.Git.Objects.GitTreeWriter.Remove(string! name) -> bool
AmpScm.Git.Objects.GitTreeWriter.Replace<TGitObject>(string! name, AmpScm.Git.Objects.IGitLazy<TGitObject!>! item, AmpScm.Git.GitTreeElementType? setType = null) -> void
AmpScm.Git.Objects.IGitLazy<TGitObject>
AmpScm.Git.Objects.IGitLazy<TGitObject>.Id.get -> AmpScm.Git.GitId?
AmpScm.Git.Objects.IGitLazy<TGitObject>.Type.get -> AmpScm.Git.GitObjectType
AmpScm.Git.Objects.IGitLazy<TGitObject>.WriteToAsync(AmpScm.Git.GitRepository! repository) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId!>
AmpScm.Git.References.GitReferenceRepository
AmpScm.Git.References.GitReferenceRepository.GetAsync(string! name) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitReference?>
AmpScm.Git.References.GitReferenceRepository.GitDir.get -> string!
AmpScm.Git.References.GitReferenceRepository.GitReferenceRepository(AmpScm.Git.GitRepository! repository, string! gitDir, string! workTreeDir) -> void
AmpScm.Git.References.GitReferenceRepository.WorkTreeDir.get -> string!
AmpScm.Git.References.GitReferenceUpdateTransaction
AmpScm.Git.References.GitReferenceUpdateTransaction.Create(string! referenceName, AmpScm.Git.GitId! newValue) -> void
AmpScm.Git.References.GitReferenceUpdateTransaction.Delete(string! referenceName, AmpScm.Git.GitId? oldValue = null) -> void
AmpScm.Git.References.GitReferenceUpdateTransaction.Dispose() -> void
AmpScm.Git.References.GitReferenceUpdateTransaction.Reason.get -> string?
AmpScm.Git.References.GitReferenceUpdateTransaction.Reason.set -> void
AmpScm.Git.References.GitReferenceUpdateTransaction.Update(string! referenceName, AmpScm.Git.GitId! newValue, AmpScm.Git.GitId? oldValue = null) -> void
AmpScm.Git.References.GitReferenceUpdateTransaction.UpdateHead(AmpScm.Git.GitId! newValue, AmpScm.Git.GitId? oldValue = null) -> void
AmpScm.Git.References.GitReferenceUpdateTransaction.Verify(string! referenceName, AmpScm.Git.GitId? oldValue = null) -> void
AmpScm.Git.References.GitSymbolicReference
AmpScm.Git.References.GitSymbolicReference.Reference.get -> AmpScm.Git.GitReference?
AmpScm.Git.References.GitSymbolicReference.ReferenceName.get -> string?
AmpScm.Git.Repository.GitBackendRepository
AmpScm.Git.Repository.GitBackendRepository.Dispose() -> void
AmpScm.Git.Repository.GitBackendRepository.GitBackendRepository(AmpScm.Git.GitRepository! repository) -> void
AmpScm.Git.Repository.GitBackendRepository.Repository.get -> AmpScm.Git.GitRepository!
AmpScm.Git.Repository.GitConfiguration
AmpScm.Git.Repository.GitConfiguration.BasicAuthenticationHandler(object? sender, AmpScm.Buckets.Client.BasicBucketAuthenticationEventArgs! e) -> void
AmpScm.Git.Repository.GitConfiguration.GetBool(string! group, string! key) -> bool?
AmpScm.Git.Repository.GitConfiguration.GetBoolAsync(string! group, string! key) -> System.Threading.Tasks.ValueTask<bool?>
AmpScm.Git.Repository.GitConfiguration.GetIntAsync(string! group, string! key) -> System.Threading.Tasks.ValueTask<int?>
AmpScm.Git.Repository.GitConfiguration.GetPathAsync(string! group, string! key) -> System.Threading.Tasks.ValueTask<string?>
AmpScm.Git.Repository.GitConfiguration.GetStringAsync(string! group, string! key) -> System.Threading.Tasks.ValueTask<string?>
AmpScm.Git.Repository.GitConfiguration.GetSubGroups(string! group) -> System.Collections.Generic.IEnumerable<string!>!
AmpScm.Git.Repository.GitConfiguration.Identity.get -> AmpScm.Git.GitSignature!
AmpScm.Git.Sets.GitNamedObjectWrapper<TGitObject, TNamedObject>
AmpScm.Git.Sets.GitNamedSet<T>
AmpScm.Git.Sets.GitNamedSet<T>.GetAsync(string! name) -> System.Threading.Tasks.ValueTask<T?>
AmpScm.Git.Sets.GitNamedSet<T>.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerator<T!>!
AmpScm.Git.Sets.GitNamedSet<T>.this[string! name].get -> T?
AmpScm.Git.Sets.GitObjectSet<T>
AmpScm.Git.Sets.GitObjectSet<T>.GetAsync(AmpScm.Git.GitId! id) -> System.Threading.Tasks.ValueTask<T?>
AmpScm.Git.Sets.GitObjectSet<T>.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerator<T!>!
AmpScm.Git.Sets.GitObjectSet<T>.ResolveIdAsync(string! idString) -> System.Threading.Tasks.ValueTask<T?>
AmpScm.Git.Sets.GitObjectSet<T>.this[AmpScm.Git.GitId! id].get -> T?
AmpScm.Git.Sets.GitObjectWrapper<TGitObject>
AmpScm.Git.Sets.GitReferenceChangeSet
AmpScm.Git.Sets.GitReferenceChangeSet.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerator<AmpScm.Git.GitReferenceChange!>!
AmpScm.Git.Sets.GitReferencesSet
AmpScm.Git.Sets.GitReferencesSet.CreateUpdateTransaction() -> AmpScm.Git.References.GitReferenceUpdateTransaction!
AmpScm.Git.Sets.GitReferencesSet.Head.get -> AmpScm.Git.GitReference!
AmpScm.Git.Sets.GitRemotesSet
AmpScm.Git.Sets.GitRevisionSet
AmpScm.Git.Sets.GitSet
AmpScm.Git.Sets.GitSet<T>
AmpScm.Git.Sets.GitTreeItem
AmpScm.Git.Sets.GitTreeItem.Entry.get -> AmpScm.Git.GitTreeEntry!
AmpScm.Git.Sets.GitTreeItem.EntryName.get -> string!
AmpScm.Git.Sets.GitTreeItem.Equals(AmpScm.Git.Sets.GitTreeItem other) -> bool
AmpScm.Git.Sets.GitTreeItem.GitTreeItem() -> void
AmpScm.Git.Sets.GitTreeItem.GitTreeItem(string! path, AmpScm.Git.GitTreeEntry! entry) -> void
AmpScm.Git.Sets.GitTreeItem.Name.get -> string!
AmpScm.Git.Sets.GitTreeItem.Path.get -> string!
AmpScm.Git.Sets.GitTreeItemCollection
AmpScm.Git.Sets.GitTreeItemCollection.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerator<AmpScm.Git.Sets.GitTreeItem>!
AmpScm.Git.Sets.GitTreeItemCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<AmpScm.Git.Sets.GitTreeItem>!
AmpScm.Git.Sets.GitTreeItemCollection.this[string! path].get -> AmpScm.Git.Sets.GitTreeItem
AmpScm.Git.Sets.GitTreeItemCollection.TryGet(string! path, out AmpScm.Git.Sets.GitTreeItem? item) -> bool
AmpScm.Git.Sets.IGitNamedObject
AmpScm.Git.Sets.IGitNamedObject.Name.get -> string!
AmpScm.Git.Sets.IGitObject
AmpScm.Git.Sets.IGitObject.ReadAsync() -> System.Threading.Tasks.ValueTask
const AmpScm.Git.References.GitReferenceRepository.Head = "HEAD" -> string!
override AmpScm.Git.GitBlob.ReadAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Git.GitCommit.ReadAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Git.GitDirectoryTreeEntry.ElementType.get -> AmpScm.Git.GitTreeElementType
override AmpScm.Git.GitDirectoryTreeEntry.EntryName.get -> string!
override AmpScm.Git.GitFileTreeEntry.ElementType.get -> AmpScm.Git.GitTreeElementType
override AmpScm.Git.GitReference.Equals(object? obj) -> bool
override AmpScm.Git.GitReference.GetHashCode() -> int
override AmpScm.Git.GitReference.ToString() -> string!
override AmpScm.Git.GitRepository.ToString() -> string!
override AmpScm.Git.GitSignature.Equals(object? obj) -> bool
override AmpScm.Git.GitSignature.GetHashCode() -> int
override AmpScm.Git.GitSignature.ToString() -> string!
override AmpScm.Git.GitTag.Name.get -> string!
override AmpScm.Git.GitTagObject.ReadAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Git.GitTagObject.Type.get -> AmpScm.Git.GitObjectType
override AmpScm.Git.GitTree.ReadAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Git.GitTree.Type.get -> AmpScm.Git.GitObjectType
override AmpScm.Git.GitTreeEntry<TEntry, TObject>.ReadAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Git.Objects.GitBlobWriter.WriteToAsync(AmpScm.Git.GitRepository! repository) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId!>
override AmpScm.Git.Objects.GitCommitWriter.Type.get -> AmpScm.Git.GitObjectType
override AmpScm.Git.Objects.GitCommitWriter.WriteToAsync(AmpScm.Git.GitRepository! repository) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId!>
override AmpScm.Git.Objects.GitTagObjectWriter.WriteToAsync(AmpScm.Git.GitRepository! repository) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId!>
override AmpScm.Git.Objects.GitTreeWriter.Type.get -> AmpScm.Git.GitObjectType
override AmpScm.Git.Objects.GitTreeWriter.WriteToAsync(AmpScm.Git.GitRepository! repository) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitId!>
override AmpScm.Git.References.GitReferenceRepository.Dispose(bool disposing) -> void
override AmpScm.Git.References.GitSymbolicReference.Commit.get -> AmpScm.Git.GitCommit?
override AmpScm.Git.References.GitSymbolicReference.GitObject.get -> AmpScm.Git.GitObject?
override AmpScm.Git.References.GitSymbolicReference.Id.get -> AmpScm.Git.GitId?
override AmpScm.Git.References.GitSymbolicReference.ReadAsync() -> System.Threading.Tasks.ValueTask
override AmpScm.Git.References.GitSymbolicReference.ToString() -> string!
override AmpScm.Git.Sets.GitNamedSet<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T!>!
override AmpScm.Git.Sets.GitObjectSet<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T!>!
override AmpScm.Git.Sets.GitReferenceChangeSet.GetEnumerator() -> System.Collections.Generic.IEnumerator<AmpScm.Git.GitReferenceChange!>!
override AmpScm.Git.Sets.GitRevisionSet.GetEnumerator() -> System.Collections.Generic.IEnumerator<AmpScm.Git.GitRevision!>!
override AmpScm.Git.Sets.GitTreeItem.Equals(object? obj) -> bool
override AmpScm.Git.Sets.GitTreeItem.GetHashCode() -> int
override sealed AmpScm.Git.GitBlob.Type.get -> AmpScm.Git.GitObjectType
override sealed AmpScm.Git.GitCommit.Type.get -> AmpScm.Git.GitObjectType
override sealed AmpScm.Git.GitObject.Equals(object? obj) -> bool
override sealed AmpScm.Git.GitObject.GetHashCode() -> int
override sealed AmpScm.Git.GitTreeEntry.Equals(object? obj) -> bool
override sealed AmpScm.Git.GitTreeEntry.GetHashCode() -> int
override sealed AmpScm.Git.GitTreeEntry<TEntry, TObject>.GitObject.get -> AmpScm.Git.GitObject!
override sealed AmpScm.Git.Objects.GitBlobWriter.Type.get -> AmpScm.Git.GitObjectType
override sealed AmpScm.Git.Objects.GitTagObjectWriter.Type.get -> AmpScm.Git.GitObjectType
static AmpScm.Git.GitObject.operator !=(AmpScm.Git.GitObject? one, AmpScm.Git.GitObject? other) -> bool
static AmpScm.Git.GitObject.operator ==(AmpScm.Git.GitObject? one, AmpScm.Git.GitObject? other) -> bool
static AmpScm.Git.GitReference.operator !=(AmpScm.Git.GitReference? r1, AmpScm.Git.GitReference? r2) -> bool
static AmpScm.Git.GitReference.operator ==(AmpScm.Git.GitReference? r1, AmpScm.Git.GitReference? r2) -> bool
static AmpScm.Git.GitReference.ValidName(string! name, bool allowSpecialSymbols) -> bool
static AmpScm.Git.GitRepository.Init(string! path) -> AmpScm.Git.GitRepository!
static AmpScm.Git.GitRepository.Init(string! path, AmpScm.Git.GitRepositoryInitArgs? init) -> AmpScm.Git.GitRepository!
static AmpScm.Git.GitRepository.Init(string! path, bool isBare) -> AmpScm.Git.GitRepository!
static AmpScm.Git.GitRepository.Open(string! path) -> AmpScm.Git.GitRepository!
static AmpScm.Git.GitRepository.OpenAsync(string! path, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitRepository!>
static AmpScm.Git.GitRepository.TryFindRoot(string! path, out string? rootPath) -> bool
static AmpScm.Git.GitTools.FirstLine(string? message) -> string?
static AmpScm.Git.GitTools.GetNormalizedFullPath(string! path) -> string!
static AmpScm.Git.GitTreeEntry.operator !=(AmpScm.Git.GitTreeEntry! e1, AmpScm.Git.GitTreeEntry! e2) -> bool
static AmpScm.Git.GitTreeEntry.operator <(AmpScm.Git.GitTreeEntry! left, AmpScm.Git.GitTreeEntry! right) -> bool
static AmpScm.Git.GitTreeEntry.operator <=(AmpScm.Git.GitTreeEntry! left, AmpScm.Git.GitTreeEntry! right) -> bool
static AmpScm.Git.GitTreeEntry.operator ==(AmpScm.Git.GitTreeEntry! e1, AmpScm.Git.GitTreeEntry! e2) -> bool
static AmpScm.Git.GitTreeEntry.operator >(AmpScm.Git.GitTreeEntry! left, AmpScm.Git.GitTreeEntry! right) -> bool
static AmpScm.Git.GitTreeEntry.operator >=(AmpScm.Git.GitTreeEntry! left, AmpScm.Git.GitTreeEntry! right) -> bool
static AmpScm.Git.Objects.GitBlobWriter.CreateFrom(AmpScm.Buckets.Bucket! bucket) -> AmpScm.Git.Objects.GitBlobWriter!
static AmpScm.Git.Objects.GitCommitWriter.Create(params AmpScm.Git.Objects.IGitLazy<AmpScm.Git.GitCommit!>![]! parents) -> AmpScm.Git.Objects.GitCommitWriter!
static AmpScm.Git.Objects.GitCommitWriter.CreateFromTree(AmpScm.Git.Objects.IGitLazy<AmpScm.Git.GitTree!>! tree) -> AmpScm.Git.Objects.GitCommitWriter!
static AmpScm.Git.Objects.GitObjectWriterExtensions.AsLazy<T>(this T! gitObject) -> AmpScm.Git.Objects.IGitLazy<T!>!
static AmpScm.Git.Objects.GitObjectWriterExtensions.AsWriter(this AmpScm.Git.GitBlob! blob) -> AmpScm.Git.Objects.GitBlobWriter!
static AmpScm.Git.Objects.GitObjectWriterExtensions.AsWriter(this AmpScm.Git.GitCommit! commit) -> AmpScm.Git.Objects.GitCommitWriter!
static AmpScm.Git.Objects.GitObjectWriterExtensions.AsWriter(this AmpScm.Git.GitObject! gitObject) -> AmpScm.Git.Objects.GitObjectWriter!
static AmpScm.Git.Objects.GitObjectWriterExtensions.AsWriter(this AmpScm.Git.GitTagObject! tag) -> AmpScm.Git.Objects.GitTagObjectWriter!
static AmpScm.Git.Objects.GitObjectWriterExtensions.AsWriter(this AmpScm.Git.GitTree! tree) -> AmpScm.Git.Objects.GitTreeWriter!
static AmpScm.Git.Objects.GitObjectWriterExtensions.FastImportAsync(this AmpScm.Git.GitRepository! repository, AmpScm.Buckets.Bucket! source) -> System.Threading.Tasks.ValueTask
static AmpScm.Git.Objects.GitTagObjectWriter.Create(AmpScm.Git.Objects.IGitLazy<AmpScm.Git.GitObject!>! objectToTag, string! name) -> AmpScm.Git.Objects.GitTagObjectWriter!
static AmpScm.Git.Objects.GitTreeWriter.CreateEmpty() -> AmpScm.Git.Objects.GitTreeWriter!
static AmpScm.Git.Repository.GitConfiguration.GetGitConfigurationFilePaths(bool includeSystem = true) -> System.Collections.Generic.IEnumerable<string!>!
static AmpScm.Git.Repository.GitConfiguration.GitProgramPath.get -> string!
static AmpScm.Git.Repository.GitConfiguration.UserHomeDirectory.get -> string!
static AmpScm.Git.Sets.GitTreeItem.operator !=(AmpScm.Git.Sets.GitTreeItem left, AmpScm.Git.Sets.GitTreeItem right) -> bool
static AmpScm.Git.Sets.GitTreeItem.operator ==(AmpScm.Git.Sets.GitTreeItem left, AmpScm.Git.Sets.GitTreeItem right) -> bool
static readonly AmpScm.Git.GitRepositoryInitArgs.DefaultInitialBranchName -> string!
virtual AmpScm.Git.GitObject.ReadAsync() -> System.Threading.Tasks.ValueTask
virtual AmpScm.Git.GitReference.Commit.get -> AmpScm.Git.GitCommit?
virtual AmpScm.Git.GitReference.GitObject.get -> AmpScm.Git.GitObject?
virtual AmpScm.Git.GitReference.Id.get -> AmpScm.Git.GitId?
virtual AmpScm.Git.GitReference.ReadAsync() -> System.Threading.Tasks.ValueTask
virtual AmpScm.Git.GitTreeEntry.ElementType.get -> AmpScm.Git.GitTreeElementType
virtual AmpScm.Git.GitTreeEntry.EntryName.get -> string!
virtual AmpScm.Git.Objects.GitObjectRepository.GetAll<TGitObject>(System.Collections.Generic.HashSet<AmpScm.Git.GitId!>! alreadyReturned) -> System.Collections.Generic.IAsyncEnumerable<TGitObject!>!
virtual AmpScm.Git.Objects.GitObjectRepository.GetByIdAsync<TGitObject>(AmpScm.Git.GitId! id) -> System.Threading.Tasks.ValueTask<TGitObject?>
virtual AmpScm.Git.Objects.GitObjectRepository.ObjectCount.get -> long
virtual AmpScm.Git.Objects.GitObjectRepository.Refresh() -> void
virtual AmpScm.Git.References.GitReferenceRepository.GetChanges(AmpScm.Git.GitReference! reference) -> System.Collections.Generic.IAsyncEnumerable<AmpScm.Git.GitReferenceChange!>?
virtual AmpScm.Git.References.GitReferenceRepository.ResolveAsync(AmpScm.Git.GitReference! gitReference) -> System.Threading.Tasks.ValueTask<AmpScm.Git.GitReference?>
virtual AmpScm.Git.References.GitReferenceRepository.ResolveByOidAsync(AmpScm.Git.GitId! id, System.Collections.Generic.HashSet<string!>! processed) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IEnumerable<AmpScm.Git.GitReference!>!>
virtual AmpScm.Git.Sets.GitNamedObjectWrapper<TGitObject, TNamedObject>.Name.get -> string!
virtual AmpScm.Git.Sets.GitObjectWrapper<TGitObject>.ReadAsync() -> System.Threading.Tasks.ValueTask